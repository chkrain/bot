import logging
import hashlib
import asyncio
import json
import io  
from io import BytesIO
import os
import random
from PIL import Image, ImageDraw, ImageFont
from urllib.request import Request
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, CallbackContext,  ChatMemberHandler
from datetime import datetime, timedelta
from telegram.ext import MessageHandler, filters, ContextTypes
from collections import defaultdict
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler
from telegram.constants import ParseMode
from telegram.error import BadRequest, TelegramError
from predictions import PREDICTIONS
from laugher import LAUGHTER
from salam import RANDOM_SALAM, RANDOM_KY, EMOJI
import requests
import time
from anime import ANIME
from bs4 import BeautifulSoup
from new import NEW, FIXED
from any import LOG_CHANNEL, MAIN_CHANNEL, USER_DATA_FILE, REPORTS_FILE, ACTION_TYPES
import shutil


TOKEN = os.getenv("TOKEN")
bot = Bot(token=TOKEN)

def token():
    if TOKEN is None:
        return "–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"
    else: 
        return "–¢–æ–∫–µ–Ω –Ω–∞ –º–µ—Å—Ç–µ"
    

lock = asyncio.Lock()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

family_hashes = {}
GUESS_GAMES = {}

def badStat():
    try:
        response = requests.get(f'https://api.telegram.org/bot{TOKEN}/getMe')
        response.raise_for_status()  
        return "–û—à–∏–±–æ–∫ –Ω–µ—Ç"
    except requests.exceptions.HTTPError as http_err:
        if http_err.response.status_code == 502:
            return "–û—à–∏–±–∫–∞ 502: Bad Gateway"
        elif http_err.response.status_code == 504:
            return "–û—à–∏–±–∫–∞ 504: Gateway Timeout" 
        else:
            return f"HTTP –æ—à–∏–±–∫–∞: {http_err}"
    except Exception as err:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {err}"

PENDING_ACTIONS = {}
PENDING_REQUESTS = {} 

def backup_user_data():
    try:
        shutil.copy(USER_DATA_FILE, f"{USER_DATA_FILE}.bak")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")

def load_user_data():
    default_data = {
        "username": None,
        "role": "—É—á–∞—Å—Ç–Ω–∏–∫",
        "family": None,
        "family_role": None,
        "family_points": 0,
        "warnings": 0,
        "muted_until": None,
        "family_title": "–ù–µ—Ç —Ç–∏—Ç—É–ª–∞"
    }

    try:
        with open(USER_DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)

        if not isinstance(data, dict):
            logger.error("–§–∞–π–ª users_data.json –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—É—Å—Ç—É—é –±–∞–∑—É.")
            return {}

        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(data)}")
        logger.debug(f"üìú –í—Å–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {list(data.keys())}")

        updated_data = {}
        for user_id, user_info in data.items():
            str_user_id = str(user_id)
            updated_data[str_user_id] = {**default_data, **user_info}

        return updated_data

    except FileNotFoundError:
        logger.error(f"‚ùå –§–∞–π–ª {USER_DATA_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π.")
        return {}

    except json.JSONDecodeError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ JSON –≤ {USER_DATA_FILE}: {e}")
        return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def welcome_new_member(update: Update, context: CallbackContext):
    if update.chat_member.new_chat_members:
            for member in update.chat_member.new_chat_members:
                if update.chat_member.chat.username == MAIN_CHANNEL or str(update.chat_member.chat.id) == MAIN_CHANNEL:
                    welcome_text = f"{random.choice(RANDOM_SALAM)} {member.full_name}, {random.choice(RANDOM_KY)}!"
                    await reply_and_delete(update, context, welcome_text, delete_after=120)

def save_user_data(data):
    try:
        temp_file = f"{USER_DATA_FILE}.tmp"
        with open(temp_file, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        os.replace(temp_file, USER_DATA_FILE)  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")


async def log_to_channel(level, message):
    try:
        await bot.send_message(chat_id=LOG_CHANNEL, text=f"{level}: {message}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫—É–ø–∫–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
async def buy_title(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    user_data = load_user_data()

    if user_id not in user_data or not user_data[user_id].get("family"):
        await reply_and_delete(update, context, "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ.")
        return

    if not context.args:
        await reply_and_delete(update, context, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.")
        return

    title_name = " ".join(context.args)  # –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    family_name = user_data[user_id]["family"]
    family_points = sum(data.get("family_points", 0) for data in user_data.values() if data.get("family") == family_name)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –æ—á–∫–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    cost = 50000
    if family_points < cost:
        await reply_and_delete(update, context, f"‚ùå –ù—É–∂–Ω–æ {pluralize_points(cost)} —Å–µ–º—å–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è.")
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º 50 000 –æ—á–∫–æ–≤ —Å –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–µ–º—å–∏
    for uid in user_data:
        if user_data[uid].get("family") == family_name:
            user_data[uid]["family_points"] = max(0, user_data[uid].get("family_points", 0) - cost)

    # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–æ–≤—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å
    user_data[user_id]["family_title"] = title_name

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = user_data[user_id]
    user_info_str = json.dumps(user_info, indent=4, ensure_ascii=False)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª LOG_CHANNEL
    await context.bot.send_message(
        chat_id=LOG_CHANNEL,
        text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∫—É–ø–∏–ª –¥–æ–ª–∂–Ω–æ—Å—Ç—å '{title_name}':\n\n{user_info_str}"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    save_user_data(user_data)

    await reply_and_delete(update, context, f"‚úÖ –¢—ã –∫—É–ø–∏–ª –¥–æ–ª–∂–Ω–æ—Å—Ç—å '{title_name}'. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö
async def check_new_users(update: Update, context: CallbackContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç."""
    user = update.message.from_user
    user_id = str(user.id)
    user_data = load_user_data()

    if user_id not in user_data:
        user_data[user_id] = {
            "username": user.username,
            "default_username": user.username,
            "role": "—É—á–∞—Å—Ç–Ω–∏–∫",
            "family": None,
            "family_role": None,
            "family_points": 0,
            "warnings": 0,
            "muted_until": None,
            "family_title": "–ù–µ—Ç —Ç–∏—Ç—É–ª–∞",
            "admin": False
        }
        save_user_data(user_data)

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await log_to_channel("INFO", f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.")

def get_prediction_count_declension(count: int) -> str:
    if count % 10 == 1 and count % 100 != 11:
        return f"{count} —Ä–∞–∑"
    elif 2 <= count % 10 <= 4 and not (11 <= count % 100 <= 14):
        return f"{count} —Ä–∞–∑–∞"
    else:
        return f"{count} —Ä–∞–∑"

# –º–∞–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
async def prediction(update: Update, context: CallbackContext):
    current_time = time.time()
    user_id = str(update.message.from_user.id)
    username = update.message.from_user.username or "—Ö–æ—Ä–æ—à–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞"

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
    user_data = ensure_user_exists(user_id, username)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π –≤ user_data
    if "last_prediction_time" not in user_data[user_id]:
        user_data[user_id]["last_prediction_time"] = 0
        user_data[user_id]["prediction_count"] = 1  

    last_prediction_time = user_data[user_id]["last_prediction_time"]
    time_diff = current_time - last_prediction_time

    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ —á–∞—Å–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
    if time_diff > 3600:
        user_data[user_id]["prediction_count"] = 1
    else:
        user_data[user_id]["prediction_count"] += 1

    # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    points_to_deduct = 100 + (user_data[user_id]["prediction_count"] - 1) * 5000

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_balance = user_data[user_id]["family_points"]
    if current_balance < points_to_deduct:
        await reply_and_delete(
            update, context,
            chat_id=update.message.chat_id,
            text=f"‚ùå –£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è, –Ω—É–∂–Ω–æ {points_to_deduct}, —Ç–∞–∫ –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ {get_prediction_count_declension(user_data[user_id]['prediction_count'])} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å (–∫–∞–∂–¥–æ–µ –ø–æ—Å–ª–µ–¥—É—é—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–º–Ω–æ–∂–∞–µ—Ç—Å—è –Ω–∞ 10, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ —á–∞—Å.)"
        )
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–ª—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    user_data[user_id]["family_points"] -= points_to_deduct
    user_data[user_id]["last_prediction_time"] = current_time

    save_user_data(user_data)

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    prediction_text = random.choice(PREDICTIONS)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    await context.bot.send_message(
        chat_id=update.message.chat_id,
        text=f"üîÆ –ú–∞–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è {username}:\n\n{prediction_text}\n\n/prediction"
    )

    # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–Ω—è—Ç–∏–∏ –±–∞–ª–ª–æ–≤
    balance_message = reply_and_delete(
        update, context,
        chat_id=update.message.chat_id,
        text=f"üí∞ –° —Ç–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –±—ã–ª–æ —Å–Ω—è—Ç–æ {points_to_deduct} —é–ø–æ–∏–Ω—Ç–æ–≤. –£–¥–∞—á–∏!"
    )

    # –ï—Å–ª–∏ –º–Ω–æ–∂–∏—Ç–µ–ª—å –±—ã–ª —Å–±—Ä–æ—à–µ–Ω, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if time_diff > 3600:
        await reply_and_delete(
            update, context,
            chat_id=update.message.chat_id,
            text="‚è≥ –í—Ä–µ–º—è —Å–±—Ä–æ—à–µ–Ω–æ! –°–ª–µ–¥—É—é—â–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–Ω–æ–≤–∞ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å 100 —é–ø–æ–∏–Ω—Ç–æ–≤."
        )


# —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
async def reply_and_delete(update: Update, context: CallbackContext, text: str, delete_after: int = 30, reply_markup=None, chat_id=None):
    try:
        # –ï—Å–ª–∏ chat_id –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏–∑ update
        if chat_id is None:
            chat_id = update.message.chat_id

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if delete_after > 0:
            asyncio.create_task(delete_message_later(message, delete_after))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
async def delete_user_command(update: Update, context: CallbackContext):
    """–£–¥–∞–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥"""
    logger.debug(f"‚è≥ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")

    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    logger.debug(f"–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {type(update.message)}")
    
    user_message = update.message

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        asyncio.create_task(delete_message_later(user_message, 15))
        logger.debug(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥: {update.message.text}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

async def delete_message_later(message, delay):
    """–§–æ–Ω–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
    await asyncio.sleep(delay)
    try:
        await message.delete()
        logger.debug(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –ø–æ—Å–ª–µ {delay} —Å–µ–∫—É–Ω–¥")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ë–î—à–Ω–æ—Å—Ç—å
def ensure_user_exists(user_id, username):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ, –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ, –µ—Å–ª–∏ –Ω–µ—Ç."""
    user_data = load_user_data()
    
    if user_id not in user_data:
        user_data[user_id] = {
            "username": username,
            "default_username": username,
            "role": "—É—á–∞—Å—Ç–Ω–∏–∫",
            "family": None,
            "family_role": None,
            "family_points": 1000,
            "warnings": 0,
            "muted_until": None,
            "family_title": "–ù–µ—Ç —Ç–∏—Ç—É–ª–∞",
            "admin": False,
            "prediction_count": 1, 
            "last_prediction_time": 0
        }
        save_user_data(user_data) 
        return user_data  

    return user_data 


# /start
async def start(update: Update, context: CallbackContext):
    user = update.message.from_user
    user_data = load_user_data()
    user_id = str(user.id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è JSON

    if user_id not in user_data:
        user_data[user_id] = {
            "username": user.username,
            "default_username": user.username,
            "role": "—É—á–∞—Å—Ç–Ω–∏–∫",
            "family": None,
            "family_role": None,
            "family_points": 0,
            "warnings": 0,
            "muted_until": None,
            "family_title": "–ù–µ—Ç —Ç–∏—Ç—É–ª–∞"
        }
        save_user_data(user_data)
        await reply_and_delete(update, context, f"–ü—Ä–∏–≤–µ—Ç, {user.username}! –î–æ–±–∞–≤–∏–ª–∞ —Ç–µ–±—è –≤ –±–∞–∑—É —Å —Ä–æ–ª—å—é '—É—á–∞—Å—Ç–Ω–∏–∫'.")
        await log_to_channel("INFO", f"{user.username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É —Å —Ä–æ–ª—å—é —É—á–∞—Å—Ç–Ω–∏–∫.")
    else:
        await reply_and_delete(update, context, f"–ü—Ä–∏–≤–µ—Ç, {user.username}! –¢—ã —É–∂–µ –≤ –±–∞–∑–µ.")

async def role(update: Update, context: CallbackContext):
    user = update.message.from_user
    user_id = str(update.message.from_user.id)
    username = update.message.from_user.username

    if user not in user_data:
        user_data = ensure_user_exists(user_id, username)
        await reply_and_delete(update, context, "–î–æ–±–∞–≤–∏–ª–∞ —Ç–µ–±—è –≤ –±–∞–∑—É —Å —Ä–æ–ª—å—é '—É—á–∞—Å—Ç–Ω–∏–∫'.")
        await log_to_channel("INFO", f"{user.username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É —Å —Ä–æ–ª—å—é —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É /role")
    else:
        role = user_data[user_id]["role"]
        await reply_and_delete(update, context, f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É —Ç–µ–±—è —Ä–æ–ª—å [{role}], –µ—Å–ª–∏ —Ä–æ–ª—å –Ω–µ —Ç–∞, –ø–∏—à–∏ –≤ —á–∞—Ç –±–∞–ª–±–µ—Å–æ–∫ –∏–ª–∏ –≤ /report")
        

# –ö–æ–º–∞–Ω–¥–∞ /username
async def set_username(update: Update, context: CallbackContext):
    user = update.message.from_user
    user_id = str(update.message.from_user.id)
    username = update.message.from_user.username
    new_username = " ".join(context.args) if context.args else user.username
    
    user_data = ensure_user_exists(user_id, username)
    user_data[user_id]["username"] = new_username
    save_user_data(user_data)
    
    await reply_and_delete(update, context, f"‚úÖ –¢–≤–æ–π –Ω–∏–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_username}")
    await log_to_channel("INFO", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º –Ω–∏–∫–æ–º {user_data['default_username']} –ø–æ—Å—Ç–∞–≤–∏–ª –Ω–æ–≤—ã–π –∏–∑–º–µ–Ω—è–µ–º—ã–π –Ω–∏–∫: {user_data['username']}")
    
# –ö–æ–º–∞–Ω–¥—ã /warn –∏ /mute + –∞–≤—Ç–æ-–º—É—Ç
async def warn_user(update: Update, context: CallbackContext):
    user_data = load_user_data()
    moderator = update.message.from_user  
    moderator_id = str(moderator.id)
    moderator_username = moderator.username or f"ID:{moderator_id}" 

    if user_data.get(moderator_id, {}).get("role") not in ["–º–æ–¥–µ—Ä–∞—Ç–æ—Ä", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "—Å—Ç—Ä–∏–º–µ—Ä"]:
        await reply_and_delete(update, context, "‚ùå –ö—É–¥–∞ –º—ã –ª–µ–∑–µ–º, —Ç—É—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –≤—ã—à–µ")
        return

    if not context.args:
        await reply_and_delete(update, context, "–ò—Å–ø–æ–ª—å–∑—É–π /warn @username")
        return

    target_username = context.args[0].lstrip('@')
    target_id = next((uid for uid, data in user_data.items() if data["default_username"] == target_username), None)

    if not target_id:
        await reply_and_delete(update, context, "‚ùå –ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç—ã –∑–∞ –º–µ–Ω—è –ø—Ä–∏–¥—É—Ä–∫–∞ –Ω–µ –¥–µ—Ä–∂–∏")
        return

    user_data[target_id]["warnings"] += 1
    save_user_data(user_data)

    await log_to_channel(
        "WARNING", 
        f"üõë –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä @{moderator_username} –≤—ã–¥–∞–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{target_username}. "
        f"–í—Å–µ–≥–æ –ø—Ä–µ–¥–æ–≤: {user_data[target_id]['warnings']}"
    )

    if user_data[target_id]["warnings"] >= 3:
        user_data[target_id]["warnings"] = 2
        await mute_user_logic(context, target_id, timedelta(hours=1))
        await reply_and_delete(update, context, f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ 1 —á–∞—Å –∑–∞ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è!\n–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã –¥–æ {user_data[target_id]['warnings']}")
        
        await log_to_channel(
            "WARNING", 
            f"üîá –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä @{moderator_username} –∑–∞–º—É—Ç–∏–ª @{target_username} –Ω–∞ 1 —á–∞—Å "
            f"–∑–∞ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è. –ü—Ä–µ–¥—ã —Å–±—Ä–æ—à–µ–Ω—ã."
        )

    await reply_and_delete(update, context, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–ª—É—á–∏—Ç –ø–æ —à–µ–µ. –í—Å–µ–≥–æ –ø—Ä–µ–¥–æ–≤: {user_data[target_id]['warnings']}")


# 1. –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≥–æ–Ω–∞ –∏–∑ —Å–µ–º—å–∏
async def kick_from_family(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    user_data = load_user_data()
    
    if user_data.get(user_id, {}).get("role") not in ["–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"] or \
       user_data.get(user_id, {}).get("admin") not in ["true"] or \
       user_data.get(user_id, {}).get("family_role") != "–ì–ª–∞–≤–∞":
        await reply_and_delete(update, context, "‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–∞ —Å–µ–º—å–∏ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–≥–æ–Ω—è—Ç—å, –≤–∞—â–µ –æ—Ñ–∏–≥–µ–ª–∏?")
        return
    
    if not context.args:
        await reply_and_delete(update, context, "–ò—Å–ø–æ–ª—å–∑—É–π /kickfam @username")
        return
    
    target_username = context.args[0].lstrip('@')
    target_id = next((uid for uid, data in user_data.items() if data["username"] == target_username), None)
    
    if not target_id or user_data[target_id].get("family") != user_data[user_id].get("family"):
        await reply_and_delete(update, context, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤ —Ç–≤–æ–µ–π —Å–µ–º—å–µ")
        return
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–µ–º—å–∏
    family_name = user_data[target_id]["family"]
    user_data[target_id]["family"] = None
    user_data[target_id]["family_role"] = None
    save_user_data(user_data)
    
    await reply_and_delete(update, context, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} –≤—ã–≥–Ω–∞–Ω –∏–∑ —Å–µ–º—å–∏ {family_name}! –ö–∞–∫ –¥—É–º–∞–µ—Ç–µ, —á—Ç–æ –Ω–∞–¥–µ–ª–∞–ª?")
    await context.bot.send_message(
        chat_id=target_id,
        text=f"‚ö†Ô∏è –¢–µ–±—è –∏—Å–∫–ª—é—á–∏–ª–∏ –∏–∑ —Å–µ–º—å–∏ {family_name}, –±–∞–π-–±–∞–π!"
    )
    await log_to_channel("WARNING", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ —Å–µ–º—å–∏ {family_name}, –ø–µ—á–∞–ª—å–∫–∞ TT")

# –°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
async def family_action(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    user_data = load_user_data()
    chat_id = update.effective_chat.id

    now = datetime.now()
    last_reset_str = user_data.get(user_id, {}).get("daily_actions", {}).get("last_reset", "2000-01-01")
    last_reset = datetime.fromisoformat(last_reset_str)
    
    if (now - last_reset).days >= 1:
        user_data.setdefault(user_id, {})["daily_actions"] = {
            "last_reset": now.isoformat(),
            "hug": 0,
            "kiss": 0,
            "sex": 0
        }
        save_user_data(user_data)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
    action_type = update.message.text.split()[0].lstrip('/').lower()
    
    action_limits = {
        'hug': 25,
        'kiss': 10,
        'sex': 2
    }
    
    if action_type in action_limits:
        current_count = user_data[user_id]["daily_actions"].get(action_type, 0)
        if current_count >= action_limits[action_type]:
            await reply_and_delete(
                update, context,
                f"‚ùå –õ–∏–º–∏—Ç {ACTION_TYPES[action_type]} –∏—Å—á–µ—Ä–ø–∞–Ω! –î–æ—Å—Ç—É–ø–Ω–æ {action_limits[action_type]}/–¥–µ–Ω—å"
            )
            return

    if not context.args:
        await reply_and_delete(update, context, f"–ò—Å–ø–æ–ª—å–∑—É–π: /{action_type} @username")
        return

    target_username = context.args[0]
    if target_username.startswith('@'):
        target_username = target_username.lstrip('@')  
    else:
        target_username = '@' + target_username  

    target_id = next((uid for uid, data in user_data.items() if data.get("default_username") == target_username), None)


    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    if not target_id:
        await reply_and_delete(update, context, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å—ä–µ–±–∞–ª—Å—è —Å –∫–∞–Ω–∞–ª–∞")
        return
    if user_id == target_id:
        await reply_and_delete(update, context, "‚ùå –ù–µ–ª—å–∑—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Å–∞–º–∏–º —Å–æ–±–æ–π, —à–∞–ª—É–Ω–∏—à–∫–∞")
        return
    if user_data[user_id].get("family") != user_data[target_id].get("family"):
        await reply_and_delete(update, context, "‚ùå –ú–æ–∂–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å —á–ª–µ–Ω–∞–º–∏ —Å–≤–æ–µ–π —Å–µ–º—å–∏")
        return
    if action_type not in ACTION_TYPES:
        await reply_and_delete(update, context, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –î–æ—Å—Ç—É–ø–Ω–æ: " + ", ".join(ACTION_TYPES.keys()))
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–∫–æ–≤ —Å–µ–º—å–∏
    family_name = user_data[user_id]["family"]
    family_points = sum(data["family_points"] for data in user_data.values() if data.get("family") == family_name)
    
    if action_type == "kiss" and family_points < 150:
        await reply_and_delete(update, context, "‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 150 –æ—á–∫–æ–≤ —Å–µ–º—å–∏ –¥–ª—è –ø–æ—Ü–µ–ª—É—è, —É–∑–Ω–∞–π—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ —Ö–æ—Ç—è–± —Ö–∑")
        return
    if action_type == "sex" and family_points < 1000:
        await reply_and_delete(update, context, "‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 1000 –æ—á–∫–æ–≤ –∏ 300 —Ä—É–±–∞—Å–æ–≤ –Ω–∞ –≥–∞–Ω–¥–æ–Ω—ã –¥–ª—è —Å–µ–∫—Å–∞")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º callback_data
    action_key = f"{chat_id}_{target_id}"
    callback_data_accept = f"accept_{action_key}_{action_type}_{target_id}"
    callback_data_reject = f"reject_{action_key}_{target_id}"
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=callback_data_accept),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=callback_data_reject)
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    PENDING_ACTIONS[action_key] = {
        'from_id': user_id,
        'chat_id': chat_id,
        'action': action_type,
        'timestamp': datetime.now()
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        message = await context.bot.send_message(
            chat_id=chat_id,
            text=f"üé≠ {user_data[user_id]['username']} —Ö–æ—á–µ—Ç {ACTION_TYPES[action_type]} @{target_username}!\n"
                 f"@{target_username}, —á—ë –¥—É–º–∞–µ—à—å?",
            reply_markup=reply_markup
        )
        PENDING_ACTIONS[action_key]['message_id'] = message.message_id
    except BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return

# –∂—É–ª–∏–∫ –¥–æ–ø –Ω–∞–≥—Ä–∞–¥–∞
async def set_family_title(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    user_data = load_user_data()
    
    moderator = update.message.from_user
    moderator_id = str(moderator.id)
    user_role = user_data.get(moderator_id, {}).get("role")
    is_admin = user_data.get(moderator_id, {}).get("admin", False)
    
    
    if user_role not in ["–º–æ–¥–µ—Ä–∞—Ç–æ—Ä", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "—Å—Ç—Ä–∏–º–µ—Ä", "–∂—É–ª–∏–∫"] and not is_admin:
        await reply_and_delete( update, context, "‚ùå –¢–æ–ª—å–∫–æ –æ–±–ª–∞–¥–∞—Ç–µ–ª–∏ —Ä–æ–ª–∏ –∂—É–ª–∏–∫ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å —Ç–∏—Ç—É–ª, –Ω–∞–∫–æ–ø–∏ –±–∞–±–æ–∫ –∏ –∫—É–ø–∏)")
        return
    
    if not context.args:
        await reply_and_delete(update, context, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π /settitle [—Ç–∏—Ç—É–ª]")
        return
    
    new_title = " ".join(context.args)
    user_data[user_id]["family_title"] = new_title
    save_user_data(user_data)
    await reply_and_delete(update, context, f"‚úÖ –£ —Ç–µ–±—è –Ω–æ–≤—ã–π —Ç–∏—Ç—É–ª: {new_title}\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /user")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤
async def handle_action_response(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    try:
        data = query.data.split('_')
        action = data[0]  # "accept" –∏–ª–∏ "reject"
        action_key = "_".join(data[1:-2])  # chat_id_target_id
        action_type = data[-2] if action == "accept" else None
        target_id = data[-1]  # ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–∂–∞–ª —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if str(query.from_user.id) != target_id:
            await query.answer("‚ùå –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –¥–ª—è —Ç–µ–±—è!", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        action_data = PENDING_ACTIONS.get(action_key)
        if not action_data:
            await query.answer("‚ùå –ó–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –æ—Ç–º–µ–Ω—ë–Ω")
            return

        user_data = load_user_data()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è
        if action == "accept":
            # –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏
            bonus = 2 if user_data[action_data['from_id']].get("role") in ["–∂—É–ª–∏–∫", "—Å—Ç—Ä–∏–º–µ—Ä", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"] else 1
            rewards = {
                'hug': 1 * bonus,
                'kiss': 3 * bonus,
                'sex': 10,
                'slap': -20,
                'highfive': 3
            }
            reward = rewards.get(action_type, 0)

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—á–∫–∏ —Å–µ–º—å–∏
            family_name = user_data[action_data['from_id']]['family']
            for uid in user_data:
                if user_data[uid].get("family") == family_name:
                    user_data[uid]["family_points"] += reward
            save_user_data(user_data)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π
            user_data[action_data['from_id']]["daily_actions"][action_type] += 1
            save_user_data(user_data)

            response_text = (
                f"‚úÖ @{query.from_user.username} –ø—Ä–∏–Ω—è–ª –¥–µ–π—Å—Ç–≤–∏–µ!\n"
                f"–°–µ–º—å—è {family_name} –ø–æ–ª—É—á–∏–ª–∞ {pluralize_points(reward)}."
            )
        else:
            response_text = f"‚ùå @{query.from_user.username} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å."

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        if query.message:
            try:
                await query.message.delete()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await context.bot.send_message(
            chat_id=action_data['chat_id'],
            text=response_text
        )

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        if action_key in PENDING_ACTIONS:
            del PENDING_ACTIONS[action_key]

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}", exc_info=True)
    
async def mute_user(update: Update, context: CallbackContext):
    user_data = load_user_data()

    moderator = update.message.from_user
    moderator_id = str(moderator.id)
    moderator_username = user_data.get(moderator_id, {}).get("default_username")
    user_role = user_data.get(moderator_id, {}).get("role")
    is_admin = user_data.get(moderator_id, {}).get("admin", False)
    

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    if user_role not in ["–º–æ–¥–µ—Ä–∞—Ç–æ—Ä", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "—Å—Ç—Ä–∏–º–µ—Ä"] and not is_admin:
        await reply_and_delete(update, context, "‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –≤—ã—à–µ, –Ω–µ –±–æ—Ä–∑–µ—Ç—å")
        return

    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if len(context.args) < 2:
        await reply_and_delete(update, context, "–ò—Å–ø–æ–ª—å–∑—É–π /mute @username 1h/m/d (–ß–∞—Å, –º–∏–Ω—É–¥–∞, –¥–µ–Ω—å. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–∞–∫—Ç–∏–∫—É–µ–º–æ–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ - –º—É—Ç –Ω–∞ —Å—É—Ç–∫–∏, –Ω–µ –ø–µ—Ä–µ—É—Å–µ—Ä–¥—Å—Ç–≤—É–π)")
        return

    target_username = context.args[0].lstrip('@')
    time_arg = context.args[1]

    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_id = next((uid for uid, data in user_data.items() if data["username"] == target_username), None)
    if not target_id:
        await reply_and_delete(update, context, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
    try:
        duration = int(time_arg[:-1])
        unit = time_arg[-1].lower()
        delta = {
            'm': timedelta(minutes=duration),
            'h': timedelta(hours=duration),
            'd': timedelta(days=duration)
        }[unit]
    except Exception as e:
        await reply_and_delete(update, context, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á—ë—Ç —Ç–∏–ø–∞ 30m, 1h, 2d")
        return

    # –í—ã–∑–æ–≤ mute_user_logic
    await mute_user_logic(context, target_id, delta)
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    await log_to_channel(
        "WARNING",
        f"üîá –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä @{moderator_username} –≤—ã–¥–∞–ª –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{target_username} "
        f"–Ω–∞ {time_arg} (–ø—Ä–∏—á–∏–Ω–∞: {', '.join(context.args[2:]) or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'})"
    )

    await reply_and_delete(update, context, f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} –∑–∞–º—É—á–µ–Ω –Ω–∞ {time_arg} –∑–∞ –ø–ª–æ—Ö–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ")


async def safe_reply(update: Update, context: CallbackContext, text: str, is_moder_command: bool = False):
    try:
        if is_moder_command or update.message.chat.type == "private":
            await context.bot.send_message(
                chat_id=update.effective_user.id,
                text=text
            )
        else:
            await reply_and_delete(update, context, text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        if update.message.chat.type != "private":
            await reply_and_delete(update, context, "‚ö†Ô∏è –õ–∏—á–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞")

# ANIME –ê–ù–ò–ú–ï
async def send_random_anime(update, context):
    username = update.message.from_user.username  
    anime_name, anime_data = random.choice(list(ANIME.items()))
    emoji = random.choice(EMOJI)
    text = f"{emoji} {username}, –ø–æ—Å–º–æ—Ç—Ä–∏ {anime_name}\n\nüîó –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç—É—Ç: {anime_data['url']}"

    await context.bot.send_photo(
        chat_id=update.message.chat_id,
        photo=anime_data["image"],
        caption=text
    )
    

def load_user_data():
    try:
        with open(USER_DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_user_data(data):
    with open(USER_DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /guess
async def start_guess_game(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    user_data = load_user_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∏–≥—Ä–∞
    last_game_time = user_data.get(user_id, {}).get("last_guess_game")
    if last_game_time and datetime.now() - datetime.fromisoformat(last_game_time) < timedelta(hours=1):
        await reply_and_delete(update, context, "‚ùå –¢—ã —É–∂–µ –∏–≥—Ä–∞–ª, –ø–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ —á–∞—Å.")
        return
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞
    random_number = random.randint(1, 100)
    
    # –ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    user_data.setdefault(user_id, {})
    user_data[user_id]["last_guess_game"] = datetime.now().isoformat()
    user_data[user_id]["random_number"] = random_number
    user_data[user_id]["attempts"] = 0
    save_user_data(user_data)
    
    await reply_and_delete(update, context, "üîÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100")

class GameFilter(filters.MessageFilter):
    def filter(self, message):
        user_data = load_user_data()
        user_id = str(message.from_user.id)
        return 'random_number' in user_data.get(user_id, {})
    
game_filter = GameFilter()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_guess(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    user_data = load_user_data()
    
    if 'random_number' not in user_data.get(user_id, {}):
        return

    random_number = user_data[user_id]['random_number']
    
    try:
        user_guess = int(update.message.text)
        
        if not (1 <= user_guess <= 100):
            await reply_and_delete(update, context, "‚ùå –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 100")
            return
        
        user_data[user_id]["attempts"] = user_data[user_id].get("attempts", 0) + 1
        
        # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
        del user_data[user_id]['random_number']
        del user_data[user_id]['attempts']
        
        if user_guess == random_number:
            won = True
            family_name = user_data.get(user_id, {}).get('family')
            if family_name:
                for uid in user_data:
                    if user_data[uid].get("family") == family_name:
                        user_data[uid]["family_points"] += 10000
                reply_text = f"‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ß–∏—Å–ª–æ {random_number} –≤–µ—Ä–Ω–æ–µ. –ö–∞–∂–¥—ã–π —á–ª–µ–Ω —Å–µ–º—å–∏ [{family_name}] –ø–æ–ª—É—á–∏–ª 10 000 –æ—á–∫–æ–≤"
            else:
                reply_text = f"‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ß–∏—Å–ª–æ {random_number} –≤–µ—Ä–Ω–æ–µ. –î–ª—è –±–æ–Ω—É—Å–∞ –≤—Å—Ç—É–ø–∏—Ç–µ –≤ —Å–µ–º—å—é"
        else:
            won = False
            reply_text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –í–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ: {random_number}. –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ —á–∞—Å (/guess)"
        
        await update_user_stats(user_data, user_id, won)
        save_user_data(user_data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        await reply_and_delete(update, context, reply_text)

    except ValueError:
        await reply_and_delete(update, context, "‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.")
        # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–≤–æ–¥–∞
        del user_data[user_id]['random_number']
        save_user_data(user_data)

# –°—Ç–∞—Ç—É—Å
async def update_user_stats(user_data, user_id, won):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    user_data.setdefault(user_id, {}).setdefault("wins", 0)
    user_data.setdefault(user_id, {}).setdefault("games", 0)
    user_data.setdefault(user_id, {}).setdefault("level", 0)
    user_data.setdefault(user_id, {}).setdefault("status", "–ù–æ–≤–∏—á–æ–∫")

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ —á–∏—Å–ª–æ –∏–≥—Ä
    user_data[user_id]["games"] += 1

    if won:
        user_data[user_id]["wins"] += 1

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
        if is_fibonacci(user_data[user_id]["wins"]):
            user_data[user_id]["level"] += 1

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞
        user_data[user_id]["status"] = get_user_status(user_data[user_id]["level"])

    # –í—ã—á–∏—Å–ª—è–µ–º win_rate
        user_data[user_id]["win_rate"] = round((user_data[user_id]["wins"] / user_data[user_id]["games"]) * 100, 2)
    
    save_user_data(user_data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è


def is_fibonacci(n):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ —á–∞—Å—Ç—å—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –§–∏–±–æ–Ω–∞—á—á–∏"""
    if n in {0, 1}:  # –ß–∏—Å–ª–∞ 0 –∏ 1 ‚Äî —á–∞—Å—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        return True
    a, b = 0, 1
    while b < n:
        a, b = b, a + b
    return b == n

def get_user_status(level):
    if level < 4:
        return "–ù–æ–≤–∏—á–æ–∫"
    elif level < 8:
        return "–û–ø—ã—Ç–Ω—ã–π"
    elif level < 12:
        return "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª"
    elif level < 16:
        return "–ú–∞—Å—Ç–µ—Ä"
    elif level < 20:
        return "–õ–µ–≥–µ–Ω–¥–∞"
    elif level < 24:
        return "–ß–∏—Ç–µ—Ä"
    else:
        return "–ë–æ–∂–µ—Å—Ç–≤–æ"

# /buyrole 
async def buy_role(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    user_data = load_user_data()
    
    if user_id not in user_data or not user_data[user_id].get("family"):
        await reply_and_delete(update, context, "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ.")
        return

    if not context.args:
        await reply_and_delete(update, context, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /buyrole –∂—É–ª–∏–∫, /buyrole –∑–∞—â–∏—Ç–Ω–∏–∫ –∏–ª–∏ /buyrole –≤–∏–ø.")
        return
    
    role_to_buy = context.args[0].lower()
    family_name = user_data[user_id]["family"]
    family_points = sum(data.get("family_points", 0) for data in user_data.values() if data.get("family") == family_name)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫—É—é —Ä–æ–ª—å —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if role_to_buy == "–∂—É–ª–∏–∫":
        cost = 100000
        new_role = "–∂—É–ª–∏–∫"
    elif role_to_buy == "–∑–∞—â–∏—Ç–Ω–∏–∫":
        cost = 1000
        new_role = "–∑–∞—â–∏—Ç–Ω–∏–∫"
    elif role_to_buy == "–≤–∏–ø":
        cost = 20000000
        new_role = "–≤–∏–ø"
    else:
        await reply_and_delete(update, context, "‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏: '–∂—É–ª–∏–∫' (100 000 –æ—á–∫–æ–≤ —Å–µ–º—å–∏), '–∑–∞—â–∏—Ç–Ω–∏–∫' (1000 –æ—á–∫–æ–≤ —Å–µ–º—å–∏), '–≤–∏–ø' (2 000 000 –æ—á–∫–æ–≤ —Å–µ–º—å–∏).")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –æ—á–∫–æ–≤ —Å–µ–º—å–∏
    if family_points < cost:
        await reply_and_delete(update, context, f"‚ùå –ù—É–∂–Ω–æ {pluralize_points(cost)} —Å–µ–º—å–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ä–æ–ª–∏ '{new_role}'. –ü–æ—Å–º–æ—Ç—Ä–∏ —Å–≤–æ–∏ –æ—á–∫–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /points")
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º –æ—á–∫–∏ —Å–µ–º—å–∏ —É –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ–º—å–∏
    for uid in user_data:
        if user_data[uid].get("family") == family_name:
            user_data[uid]["family_points"] = max(0, user_data[uid].get("family_points", 0) - cost)

    # –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤—É—é —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_data[user_id]["role"] = new_role
    save_user_data(user_data)

    await reply_and_delete(update, context, f"‚úÖ {user_data[user_id]['username']} –∫—É–ø–∏–ª —Ä–æ–ª—å '{new_role}'! {cost} –æ—á–∫–æ–≤ —Å–ø–∏—Å–∞–Ω–æ —Å–æ –≤—Å–µ–π —Å–µ–º—å–∏ {family_name}.")
    await log_to_channel("INFO", f"{user_data[user_id]['username']} –∫—É–ø–∏–ª —Ä–æ–ª—å '{new_role}'! {pluralize_points(cost)} —Å–ø–∏—Å–∞–Ω–æ —Å–æ –≤—Å–µ–π —Å–µ–º—å–∏ {family_name}.")

# –Ω–∞–∫—Ä—É—Ç –æ—á–∫–æ–≤ 
async def modify_family_points(update: Update, context: CallbackContext):
    admin = update.message.from_user  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_id = str(admin.id)
    admin_username = admin.username or f"ID:{admin_id}"  # –ù–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è username
    
    user_data = load_user_data()
    
    moderator = update.message.from_user
    moderator_id = str(moderator.id)
    user_role = user_data.get(moderator_id, {}).get("role")
    is_admin = user_data.get(moderator_id, {}).get("admin", False)
    
    
    if user_role not in ["–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "—Å—Ç—Ä–∏–º–µ—Ä"] and not is_admin:
        await reply_and_delete(update, context, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –æ—á–∫–∏ —Å–µ–º—å–∏.")
        return
    
    if len(context.args) < 2:
        await reply_and_delete(update, context, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /modifypoints @username [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]")
        return
    
    target_username = context.args[0].lstrip('@')
    points_change = int(context.args[1])
    target_id = next((uid for uid, data in user_data.items() if data["username"] == target_username), None)
    
    if not target_id or not user_data[target_id].get("family"):
        await reply_and_delete(update, context, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Å–µ–º—å–µ.")
        return
    
    family_name = user_data[target_id]["family"]
    for uid in user_data:
        if user_data[uid].get("family") == family_name:
            user_data[uid]["family_points"] = user_data[uid].get("family_points", 0) + points_change
    
    save_user_data(user_data)
    await reply_and_delete(update, context, f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–æ {pluralize_points(points_change)} –¥–ª—è —Å–µ–º—å–∏ {family_name}.")
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await log_to_channel(
        "ALARM", 
        f"üö® –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{admin_username} –∏–∑–º–µ–Ω–∏–ª –æ—á–∫–∏ —Å–µ–º—å–∏ {family_name} "
        f"–Ω–∞ {points_change} (—Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{target_username})"
    )
    
# –ª–æ–≥–∏–∫–∞ –∑–∞–º—É—Ç–∞
async def mute_user_logic(context: CallbackContext, user_id: str, delta: timedelta):
    user_data = load_user_data()
    mute_end = datetime.now() + delta
    
    user_data[user_id]["muted_until"] = mute_end.isoformat()
    save_user_data(user_data)
    
    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º—É—Ç
    context.job_queue.run_once(
        callback=unmute_job,
        when=delta.total_seconds(),
        chat_id=user_id,
        name=f"unmute_{user_id}"
    )

# 5-8. –§—É–Ω–∫—Ü–∏–∏ —Å–µ–º—å–∏
async def create_family(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    user_data = load_user_data()
    
    if user_data[user_id].get("family"):
        await reply_and_delete(update, context, "‚ùå –¢—ã —É–∂–µ –≤ —Å–µ–º—å–µ —á–µ —Ç–≤–æ—Ä–∏—à—å")
        return
    
    family_name = " ".join(context.args) if context.args else f"–°–µ–º—å—è {user_data[user_id]['username']}"
    user_data[user_id]["family"] = family_name
    user_data[user_id]["family_role"] = "–ì–ª–∞–≤–∞"
    save_user_data(user_data)
    
    await reply_and_delete(update, context, f"üë®üë©üëßüë¶ –°–µ–º—å—è '{family_name}' —Å–æ–∑–¥–∞–Ω–∞! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —Å–ª–æ–º–∞–ª –µ—ë, —Ç—ã –ø–æ–±–µ–¥–∏–ª, —Ç—ã –∫–æ—Ä–æ–ª—å!")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –º—É—Ç–∞
# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –º—É—Ç–∞
async def mute_user_logic(context: CallbackContext, user_id: str, delta: timedelta):
    user_data = load_user_data()
    mute_end = datetime.now() + delta
    
    user_data[user_id]["muted_until"] = mute_end.isoformat()
    save_user_data(user_data)
    
    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º—É—Ç
    context.job_queue.run_once(
        callback=unmute_job,
        when=delta.total_seconds(),
        user_id=user_id,
        name=f"unmute_{user_id}"
    )

async def report(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    
    if not context.args:
        await reply_and_delete(update, context, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: `/report —Ç–µ–∫—Å—Ç`")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–ø–æ—Ä—Ç–∞
    report_text = " ".join(context.args).strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ —Ä–µ–ø–æ—Ä—Ç–∞
    if len(report_text) > 500:
        await reply_and_delete(update, context, "‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –≤–∞—â–µ –Ω–µ –∫–∞–π—Ñ, –º–Ω–µ –∂–µ —ç—Ç–æ –≤—Å—ë —á–∏—Ç–∞—Ç—å –ø–æ—Ç–æ–º.. –º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤")
        return

    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ç—á—ë—Ç—ã (–µ—Å–ª–∏ —Ñ–∞–π–ª –µ—Å—Ç—å)
    if os.path.exists(REPORTS_FILE):
        with open(REPORTS_FILE, "r", encoding="utf-8") as file:
            try:
                reports = json.load(file)
            except json.JSONDecodeError:
                reports = []
    else:
        reports = []

    user_data = load_user_data()
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç
    new_report = {
        "id": user_id,
        "text": report_text,
        "time": timestamp
    }
    reports.append(new_report)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
    with open(REPORTS_FILE, "w", encoding="utf-8") as file:
        json.dump(reports, file, indent=4, ensure_ascii=False)

    await reply_and_delete(update, context, "‚úÖ –†–µ–ø–æ—Ä—Ç –∑–∞–ø–∏—Å–∞–Ω, –µ—Å–ª–∏ —Ç–∞–º —á–µ—Ç –Ω–µ–ø—Ä–∏—Å—Ç–æ–π–Ω–æ–µ –ø–æ –∞–π–ø–∏ –≤—ã—á–∏—Å–ª—é üôå")
    await log_to_channel("INFO", f"{user_data[user_id]['default_username']} –æ–Ω –∂–µ {user_data[user_id]['username']} –∫–∏–Ω—É–ª —Ä–µ–ø–æ—Ä—Ç")

async def unmute_job(context: ContextTypes.DEFAULT_TYPE):
    user_id = context.job.user_id
    user_data = load_user_data()
    if user_data.get(user_id, {}).get("muted_until"):
        user_data[user_id]["muted_until"] = None
        save_user_data(user_data)

async def join_family(update: Update, context: CallbackContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —Å–µ–º—å—é"""
    user_id = str(update.message.from_user.id)
    user = update.message.from_user  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_id = update.message.chat_id
    user_data = load_user_data()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ - —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
    if user_id not in user_data:
        user_data[user_id] = {
            "username": user.username,
            "role": "—É—á–∞—Å—Ç–Ω–∏–∫",
            "family": None,
            "family_role": None,
            "family_points": 0,
            "warnings": 0,
            "muted_until": None,
            "family_title": "–ù–µ—Ç —Ç–∏—Ç—É–ª–∞",
            "default_username": user.username,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π username
            "admin": False
        }
        save_user_data(user_data)
        await log_to_channel(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ø–æ–ø—ã—Ç–∫–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Å–µ–º—å—é) {user_id}")
    
    if user_data.get(user_id, {}).get("family"):
        await reply_and_delete(update, context, "‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ!")
        return

    if not context.args:
        await reply_and_delete(update, context, "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º—å–∏: /joinfam –ù–∞–∑–≤–∞–Ω–∏–µ–°–µ–º—å–∏")
        return

    family_name = " ".join(context.args).strip()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö—ç—à –¥–ª—è —Å–µ–º—å–∏
    family_hash = hashlib.md5(family_name.encode()).hexdigest()[:8]
    family_hashes[family_hash] = family_name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö—ç—à

    # –ü–æ–∏—Å–∫ –≥–ª–∞–≤—ã —Å–µ–º—å–∏
    family_head = next(
        (uid for uid, data in user_data.items()
         if data.get("family") == family_name and 
         data.get("family_role", "").lower() in ["–≥–ª–∞–≤–∞", "–º–∞–º–∞", "–ø–∞–ø–∞", "–º–∞–º–∞ –ø–æ–ª—è", "–≥–ª–∞–≤–∞ —Å–µ–º–µ–π—Å—Ç–≤–∞"]),
        None
    )

    if not family_head:
        await reply_and_delete(update, context, "‚ùå –°–µ–º—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤ –Ω–µ–π –Ω–µ—Ç –≥–ª–∞–≤—ã. –ï—Å–ª–∏ –ì–õ–ê–í–ê –ø–æ–º–µ–Ω—è–ª —Ä–æ–ª—å, –∫—Ç–æ-–ª–∏–±–æ –¥—Ä—É–≥–æ–π –¥–æ–ª–∂–µ–Ω –ø–æ–º–µ–Ω—è—Ç—å —Ä–æ–ª—å –Ω–∞ –ì–õ–ê–í–£")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º callback_data —Å —Ö—ç—à–µ–º
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_join_{family_hash}_{user_id}_{chat_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_join_{family_hash}_{user_id}_{chat_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    PENDING_REQUESTS.setdefault(family_name, {})[user_id] = {
        "username": user_data.get(user_id, {}).get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'),
        "timestamp": datetime.now()
    }

    try:
        message = await context.bot.send_message(
            chat_id=chat_id,
            text=f"üéü –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —Å–µ–º—å—é {family_name}:\n"
                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_data.get(user_id, {}).get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n"
                 "–ì–ª–∞–≤–∞ —Å–µ–º—å–∏, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        asyncio.create_task(delete_message_later(message, 60))  # –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 60 —Å–µ–∫
    except BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await reply_and_delete(update, context, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å")


async def handle_join_request(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    try:
        data = query.data.split('_')
        action = data[0]  # "accept_join" –∏–ª–∏ "reject_join"
        family_hash = data[2]  # –•—ç—à —Å–µ–º—å–∏
        target_user_id = data[3]
        chat_id = int(data[4])

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º—å–∏ –∏–∑ —Ö—ç—à–∞
        family_name = family_hashes.get(family_hash, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è_—Å–µ–º—å—è")
        
        user_data = load_user_data()
        approver_id = str(query.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        approver_info = user_data.get(approver_id) or {}  # –ó–∞—â–∏—Ç–∞ –æ—Ç None
        if not approver_info:
            await query.answer("‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        approver_family = approver_info.get("family", "")
        approver_role = approver_info.get("family_role") or ""  # –ó–∞—â–∏—Ç–∞ –æ—Ç None
        approver_role = approver_role.strip().lower()  # –û—á–∏—Å—Ç–∫–∞ –∏ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –≥–ª–∞–≤—ã
        if approver_family != family_name or approver_role not in {"–≥–ª–∞–≤–∞", "–º–∞–º–∞", "–ø–∞–ø–∞", "–º–∞–º–∞ –ø–æ–ª—è"}:
            await query.answer("‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–∞ —Å–µ–º—å–∏ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞—è–≤–∫–∏!", show_alert=True)
            logger.warning(f"User {approver_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–µ–º—å–∏ {family_name}!")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        if action == "accept":
            if target_user_id not in user_data:
                await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
                return

            user_data[target_user_id]["family"] = family_name
            user_data[target_user_id]["family_role"] = "–£—á–∞—Å—Ç–Ω–∏–∫"
            save_user_data(user_data)

            await context.bot.send_message(
                chat_id=chat_id,
                text=f"üéâ @{user_data[target_user_id]['username']} –ø—Ä–∏–Ω—è—Ç –≤ —Å–µ–º—å—é {family_name}!"
            )
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"üòû –ó–∞–ø—Ä–æ—Å @{user_data[target_user_id]['username']} –æ—Ç–∫–ª–æ–Ω—ë–Ω."
            )

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        PENDING_REQUESTS.pop(family_name, {}).pop(target_user_id, None)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_join_request: {e}", exc_info=True)


async def leave_family(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    user_data = load_user_data()
    
    if not user_data[user_id].get("family"):
        await reply_and_delete(update, context, "‚ùå –ù–µ—Ç —É —Ç–µ–±—è —Å–µ–º—å–∏, –∞ —á–∞—Å–∏–∫–∏-—Ç–æ —Ç–∏–∫–∞—é—Ç")
        return

    family_name = user_data[user_id]["family"]
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ–º—å–∏
    user_data[user_id]["family"] = None
    user_data[user_id]["family_role"] = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª—Å—è –ª–∏ –∫—Ç–æ-—Ç–æ –≤ —Å–µ–º—å–µ
    family_members = [uid for uid, data in user_data.items() if data.get("family") == family_name]
    
    if not family_members:  # –ï—Å–ª–∏ –≤ —Å–µ–º—å–µ –Ω–∏–∫–æ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
        # –£–¥–∞–ª—è–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–º—å–µ (–µ—Å–ª–∏ –æ–Ω–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
        if "families" in user_data and family_name in user_data["families"]:
            del user_data["families"][family_name]

    save_user_data(user_data)
    
    await reply_and_delete(update, context, "‚úÖ –¢—ã –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—à—å —Å–µ–º—å–µ, —á–µ —Ç–µ–ø–µ—Ä—å –ø–æ üëÑ –∫–ª—É–±–∞–º üëÑ ?)")


async def set_family_role(update: Update, context: CallbackContext):
    if not context.args:
        await reply_and_delete(update, context, "–ò—Å–ø–æ–ª—å–∑—É–π /familyrole [—Ä–æ–ª—å]")
        return
    
    new_role = " ".join(context.args).strip()
    user_id = str(update.message.from_user.id)
    user_data = load_user_data()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≥–ª–∞–≤–∞
    has_leader = any(user.get("family_role") in ["–ì–ª–∞–≤–∞", "–≥–ª–∞–≤–∞", "–∞–¥–º–∏–Ω", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"] for user in user_data.values())

    if new_role.lower() == "–≥–ª–∞–≤–∞":
        if has_leader:
            await reply_and_delete(update, context, "‚ùå –í —Å–µ–º—å–µ —É–∂–µ –µ—Å—Ç—å –≥–ª–∞–≤–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—É—Å–∫–∞–π —É–π–¥—ë—Ç")
            return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Å–µ–º–µ–π–Ω—É—é —Ä–æ–ª—å
    user_data.setdefault(user_id, {})["family_role"] = new_role
    save_user_data(user_data)
    
    await reply_and_delete(update, context, f"‚úÖ –¢–≤–æ—è —Å–µ–º–µ–π–Ω–∞—è —Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_role}. {random.choice(LAUGHTER)} —Ç—ã —Å–µ—Ä—å–µ–∑–Ω–æ??")

# –æ—á–∫–æ
def pluralize_points(n):
    if 11 <= n % 100 <= 19:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è (11-19 –≤—Å–µ–≥–¥–∞ "–æ—á–∫–æ–≤")
        return f"{n} –æ—á–∫–æ–≤"
    elif n % 10 == 1:  # –û–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 1 (–∫—Ä–æ–º–µ 11)
        return f"{n} –æ—á–∫–æ"
    elif 2 <= n % 10 <= 4:  # –û–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 2, 3, 4 (–∫—Ä–æ–º–µ 12-14)
        return f"{n} –æ—á–∫–∞"
    else:  # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ (5-9, 0)
        return f"{n} –æ—á–∫–æ–≤"

def igra(count: int) -> str:
    if 11 <= count % 100 <= 14:  
        return "–∏–≥—Ä"
    elif count % 10 == 1:  
        return "–∏–≥—Ä—ã"
    elif 2 <= count % 10 <= 4: 
        return "–∏–≥—Ä"
    else:  
        return "–∏–≥—Ä"

def pobeda(count: int) -> str:
    if 11 <= count % 100 <= 14:  
        return "–ø–æ–±–µ–¥"
    elif count % 10 == 1:  
        return "–ø–æ–±–µ–¥–∞"
    elif 2 <= count % 10 <= 4:  
        return "–ø–æ–±–µ–¥—ã"
    else:  
        return "–ø–æ–±–µ–¥"

def get_background_image(level):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–æ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è."""
    if level < 4:
        return "image/f_1.png"
    elif level < 8:
        return "image/f_2.png"
    elif level < 12:
        return "image/f_3.png"
    elif level < 16:
        return "image/f_4.png"
    elif level < 20:
        return "image/image/f_4_5.png"
    elif level < 24:
        return "image/f_5.png"
    else:
        return "image/f_6.png"

def get_level_emojis(points):
    if points < 10:
        return "üîπ"
    elif points < 50:
        return "üîπüîπ"
    elif points < 100:
        return "üîπüîπüîπ"
    elif points < 500:
        return "üíé"
    elif points < 1000:
        return "üíéüíé"
    elif points < 3000:
        return "üíéüíéüíé"
    elif points < 7000:
        return "ü•á"
    elif points < 15000:
        return "ü•áü•á"
    elif points < 50000:
        return "ü•áü•áü•á"
    elif points < 100000:
        return "üëë"
    elif points < 300000:
        return "üëëüëë"
    elif points < 500000:
        return "üëëüëëüëë"
    elif points < 1000000:
        return "üåü"
    elif points < 12000000:
        return "üåüüåü"
    elif points < 15000000:
        return "üåüüåüüåü"
    elif points < 17000000:
        return "üíéü•áüëë"
    elif points < 20000000:
        return "ü•áüëëüåü"
    elif points < 35000000:
        return "üëëüåüüëë"
    elif points < 40000000:
        return "üåüüëëüåü"
    elif points < 50000000:
        return "üåüüåüüëëüåüüåü"
    else:
        return "üåüüåüüåüüåüüåü"

def calculate_offset(emojis_count):
    base_offset = 525  # –ë–∞–∑–æ–≤—ã–π –æ—Ç—Å—Ç—É–ø (1 —ç–º–æ–¥–∂–∏)
    step = 10  # –†–∞–∑–Ω–∏—Ü–∞ –≤ –æ—Ç—Å—Ç—É–ø–µ –º–µ–∂–¥—É —ç–º–æ–¥–∑–∏
    return base_offset - (emojis_count - 1) * step

# –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ /usercard
async def user_card(update: Update, context: CallbackContext):
    user_data = load_user_data()
    target_id = str(update.message.from_user.id)

    if target_id not in user_data:
        await update.message.reply_text("‚ùå –û —Ç–µ–±–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–ø–∏—à–∏ /start")
        return

    data = user_data[target_id]
    username = user_data[target_id].get("username", "–ö—Ä—É—Ç—ã—à–∫–∞")
    points = data.get("family_points", 0)
    level = data.get("level", 1)
    title = get_user_status(level)
    games = data.get("games", 0)
    wins = data.get("wins", 0)
    role = data.get("role", "—É—á–∞—Å—Ç–Ω–∏–∫")
    family_title = data.get("family_title", "–ø–æ–¥–ø–∏—Å—á–∏–∫")

    win_rate = round((wins / games * 100), 1) if games > 0 else 0

    # –§–æ–Ω –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≥—Ä–∞–¥–∏–µ–Ω—Ç –∏–ª–∏ —Ç–µ–∫—Å—Ç—É—Ä–∞)
    try:
        base_img = Image.open(f"{get_background_image(level)}")
    except FileNotFoundError:
        base_img = Image.new("RGB", (600, 300), (0, 0, 0))  # –ß–µ—Ä–Ω—ã–π —Ñ–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    img = base_img.resize((600, 300))  # –ü–æ–¥–≥–æ–Ω—è–µ–º –ø–æ–¥ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä

    draw = ImageDraw.Draw(img)
    font = ImageFont.truetype("arial.ttf", 28)
    title_font = ImageFont.truetype("arial.ttf", 32)
    emoji_font = ImageFont.truetype("segoe.ttf", 28)
    emoji_avatar_font = ImageFont.truetype("segoe.ttf", 16)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_photo = await update.message.from_user.get_profile_photos()
    if user_photo.total_count > 0:
        print("–§–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω–æ.")
        photo = user_photo.photos[0][-1]
        photo_file = await photo.get_file()
        photo_bytes = await photo_file.download_as_bytearray()
        avatar = Image.open(io.BytesIO(photo_bytes))
        avatar = avatar.resize((100, 100))  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –∞–≤–∞—Ç–∞—Ä–∫–∏
        
        mask = Image.new('L', (100, 100), 0)
        draw_mask = ImageDraw.Draw(mask)
        draw_mask.ellipse((0, 0, 100, 100), fill=255)
        avatar.putalpha(mask)

        img.paste(avatar, (485, 5), mask)  # –í—Å—Ç–∞–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É
    else:
        print("–§–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É—é default_avatar")
        avatar = Image.open("image/default_avatar.png")  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª
        avatar = avatar.resize((100, 100))  # –†–∞–∑–º–µ—Ä –∞–≤–∞—Ç–∞—Ä–∫–∏
        
        mask = Image.new('L', (100, 100), 0)
        draw_mask = ImageDraw.Draw(mask)
        draw_mask.ellipse((0, 0, 100, 100), fill=255)
        avatar.putalpha(mask)
        
        img.paste(avatar, (485, 5), mask)

    point_emojis = get_level_emojis(points)
    offset_x = calculate_offset(len(point_emojis))
    draw.text((offset_x, 110), point_emojis, font=emoji_avatar_font, fill="black")
    
    draw.text((10, 23), f"üìú", font=emoji_font, fill="black")
    draw.text((10, 93), f"ü¶π", font=emoji_font, fill="black")
    draw.text((10, 133), f"üëë", font=emoji_font, fill="black")
    draw.text((10, 173), f"‚öúÔ∏è", font=emoji_font, fill="black")
    draw.text((10, 213), f"üèÜ", font=emoji_font, fill="black")
    draw.text((10, 253), f"üé≤", font=emoji_font, fill="black")
    # –¢–µ–∫—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ
    draw.text((50, 20), f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {username}", font=title_font, fill="black")
    draw.text((50, 90), f"–†–æ–ª—å - {role}", font=font, fill="black")
    draw.text((50, 130), f"–¢–∏—Ç—É–ª–æ–≤–∞–Ω –∫–∞–∫ {family_title}", font=font, fill="black")
    draw.text((50, 170), f"–ò–º–µ–µ—Ç {pluralize_points(points)}", font=font, fill="black")
    draw.text((50, 210), f"–£—Ä–æ–≤–µ–Ω—å {level}: {title}", font=font, fill="black")
    draw.text((50, 250), f"–ò–∑ {games} {igra(games)} {wins} {pobeda(wins)}, —ç—Ç–æ {int(win_rate)}%", font=font, fill="black")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏
    bio = io.BytesIO()
    img.save(bio, "PNG")
    bio.seek(0)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_photo(photo=bio, caption="üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞!")

async def set_admin(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    user_data = load_user_data()

    if user_data.get(user_id, {}).get("role") not in ["–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "—Å—Ç—Ä–∏–º–µ—Ä"]:
        await reply_and_delete(update, context, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
        return

    if not context.args:
        await reply_and_delete(update, context, "‚ùå –£–∫–∞–∂–∏ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    target_username = context.args[0].lstrip('@')
    target_id = next((uid for uid, data in user_data.items() if data["username"] == target_username), None)

    if not target_id:
        await reply_and_delete(update, context, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user_data[target_id]["admin"] = True  

    save_user_data(user_data)
    await reply_and_delete(update, context, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
    await log_to_channel("INFO", f"{user_data[user_id]['username']} –Ω–∞–∑–Ω–∞—á–∏–ª @{target_username} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")


# –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤
async def daily_points_task():
    while True:
        await asyncio.sleep(7200)  # –ø–æ–ª—á–∞—Å–∞
        user_data = load_user_data()
        families = defaultdict(list)

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–µ–º—å—è–º
        for uid, data in user_data.items():
            if data.get("family"):
                families[data["family"]].append(uid)

        all_log_messages = []  # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–¥–µ—Å—å

        # –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏
        for fam_name, members in families.items():
            base_points = 30
            multiplier = 50 * len(members)
            total = min(base_points + multiplier, 1000)  # –ú–∞–∫—Å–∏–º—É–º 1000 –Ω–∞ —Å–µ–º—å—é
            points_per_member = int(total / len(members))
            family_bonus = 0  # –û–±—â–∏–π –±–æ–Ω—É—Å —Å–µ–º—å–∏

            family_log = [f"--------------------------------------------"]
            
            for uid in members:
                user_data[uid]["family_points"] += points_per_member
                family_bonus += points_per_member
                default_username = user_data.get(uid, {}).get("default_username", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                current_username = user_data.get(uid, {}).get("username", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                family_log.append(f"–ë–æ–Ω—É—Å —É @{current_username} ({default_username}): +{pluralize_points(points_per_member)}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –±–æ–Ω—É—Å —Å–µ–º—å–∏
            family_log.append(f"–û–±—â–∏–π –±–æ–Ω—É—Å —É [{fam_name}] —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {pluralize_points(family_bonus)}")
            family_log.append(f"--------------------------------------------")

            all_log_messages.append("\n".join(family_log))

        save_user_data(user_data)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –±–æ–Ω—É—Å—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        if all_log_messages:
            await log_to_channel("INFO", "\n".join(all_log_messages))

        await log_to_channel("INFO", "‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã! üì¢ –í–ù–ò–ú–ê–ù–ò–ï! –ó–∞—Ä–ø–ª–∞—Ç–∞. –ü–æ–π–¥—É –¥–æ–º –∫—É–ø–ª—é üíµüí∏üí¥")


# 1. /faminfo
async def faminfo(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    user_data = load_user_data()
    
    if not user_data[user_id].get("family"):
        await reply_and_delete(update, context, "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ, –≤–µ—Ä–æ—è—Ç–Ω–æ, –≤—ã - –±–æ—Å—Å –ø–∏–∫–º–µ")
        return
    
    family_name = user_data[user_id]["family"]
    members = [
        f"‚Ä¢ {data['username']} —Å —Ä–æ–ª—å—é {data.get('family_role', '–°–æ–¥–µ—Ä–∂–∞–Ω–∫–∞')} ‚Äî {pluralize_points(data.get('family_points', 0))}"
        for uid, data in user_data.items() 
        if data.get("family") == family_name
    ]
    
    total_points = sum(data.get("family_points", 0) for data in user_data.values() if data.get("family") == family_name)

    text = (
        f"{random.choice(EMOJI)} –°–µ–º—å—è: {family_name}\n"
        f"{random.choice(EMOJI)} –û–±—â–∏–µ –æ—á–∫–∏ —Å–µ–º—å–∏: {pluralize_points(total_points)}\n"
        f"{random.choice(EMOJI)} –£—á–∞—Å—Ç–Ω–∏–∫–∏ ({len(members)}):\n" + "\n".join(members)
    )
    await reply_and_delete(update, context, text)


# 2. /topfam
async def topfam(update: Update, context: CallbackContext):
    user_data = load_user_data()
    user_id = str(update.message.from_user.id)
    
    family_name = user_data[user_id]["family"]
    members = [
        f"‚Ä¢ {data['username']} ({data['family_role']})" 
        for uid, data in user_data.items() 
        if data.get("family") == family_name
    ]
    
    families = defaultdict(int)
    for data in user_data.values():
        if data.get("family"):
            families[data["family"]] += data.get("family_points", 0)

    if not families:
        await reply_and_delete(update, context, "‚ùå –°–µ–º—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    sorted_families = sorted(families.items(), key=lambda x: x[1], reverse=True)
    text = "üèÜ –¢–æ–ø —Å–µ–º–µ–π:\n" + "\n".join([
        f"{i+1}. {name} ‚Äî {pluralize_points(points)} {random.choice(EMOJI)}"
        for i, (name, points) in enumerate(sorted_families)
    ])


    await reply_and_delete(update, context, text)

def ych(n):
    if 11 <= n % 100 <= 19:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è (11-19 –≤—Å–µ–≥–¥–∞ "–æ—á–∫–æ–≤")
        return f"{n} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
    elif n % 10 == 1:  # –û–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 1 (–∫—Ä–æ–º–µ 11)
        return f"{n} —É—á–∞—Å—Ç–Ω–∏–∫–∞"
    elif 2 <= n % 10 <= 4:  # –û–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 2, 3, 4 (–∫—Ä–æ–º–µ 12-14)
        return f"{n} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
    else:  # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ (5-9, 0)
        return f"{n} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"

# –∫–∞–∑–∏–∫
# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤ —Ä—É–ª–µ—Ç–∫–∏
RED_NUMBERS = {1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36}
BLACK_NUMBERS = {2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35}

weights = {
    "red": 45,   
    "black": 45, 
    "zero": 10
}

async def play_kazik(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    user_data = load_user_data()
    
    if len(context.args) < 2:
        await reply_and_delete(update, context, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫: /kazik [—Å—Ç–∞–≤–∫–∞] [—Ç–∏–ø_—Å—Ç–∞–≤–∫–∏] [—á–∏—Å–ª–æ/—Ü–≤–µ—Ç]")
        return
    
    try:
        bet_amount = int(context.args[0])
        bet_type = context.args[1].upper()
        bet_value = context.args[2] if len(context.args) > 2 else None
    except ValueError:
        await reply_and_delete(update, context, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞–≤–∫–∏. –ü—Ä–∏–º–µ—Ä: /kazik 100 A 7")
        return
    
    if user_id not in user_data or user_data[user_id].get("family_points", 0) < bet_amount:
        await reply_and_delete(update, context, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏, {random.choice(LAUGHTER)}")
        return
    
    # –í—ã–ø–∞–¥–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ —Ä—É–ª–µ—Ç–∫–∏ (0-36)
    # result_number = random.randint(0, 36)
    result_color = random.choices(["red", "black", "zero"], weights=[weights["red"], weights["black"], weights["zero"]])[0]
    if result_color == "red":
        result_number = random.choice(list(RED_NUMBERS))
    elif result_color == "black":
        result_number = random.choice(list(BLACK_NUMBERS))
    else:
        result_number = 0
    
    # –¢–∞–±–ª–∏—Ü–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
    payout_multipliers = {
        "A": 35,  # –ü—Ä—è–º–∞—è —Å—Ç–∞–≤–∫–∞
        "B": 17,  # –°–ø–ª–∏—Ç
        "C": 11,  # –°—Ç—Ä–∏—Ç
        "D": 8,   # –ö–∞—Ä–µ
        "E": 5,   # –°–∏–∫—Å–ª–∞–π–Ω
        "F": 2,   # –†—è–¥
        "G": 2,   # –î—é–∂–∏–Ω–∞
        "H": 1    # –ß–µ—Ç–Ω–æ–µ/–Ω–µ—á–µ—Ç–Ω–æ–µ, –∫—Ä–∞—Å–Ω–æ–µ/—á–µ—Ä–Ω–æ–µ, –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ
    }
    
    if bet_type == "A":  # –ü—Ä—è–º–∞—è —Å—Ç–∞–≤–∫–∞
        if bet_value is None or not bet_value.isdigit() or not (0 <= int(bet_value) <= 36):
            await reply_and_delete(update, context, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–∞–≤–∫–∞. –ü—Ä–∏–º–µ—Ä: /kazik 100 A 7")
            return
        if int(bet_value) == result_number:
            multiplier = payout_multipliers["A"]
        else:
            multiplier = 0
    elif bet_type == "B":  # –°–ø–ª–∏—Ç
        if len(context.args) < 3:
            await reply_and_delete(update, context, "‚ùå –î–ª—è —Å–ø–ª–∏—Ç–∞ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–≤–∞ —á–∏—Å–ª–∞. –ü—Ä–∏–º–µ—Ä: /kazik 100 B 1 2")
            return
        bet_values = [int(value) for value in context.args[2:]]
        
        if len(bet_values) != 2 or bet_values[0] < 0 or bet_values[0] > 36 or bet_values[1] < 0 or bet_values[1] > 36:
            await reply_and_delete(update, context, "‚ùå –î–ª—è —Å–ø–ª–∏—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 36.")
            return
        
        adjacent_numbers = [
            (1, 2), (2, 3), (3,4), (4, 5), (5, 6), (6,7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12),
            (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23),
            (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36)
        ]
        
        if (bet_values[0], bet_values[1]) not in adjacent_numbers and (bet_values[1], bet_values[0]) not in adjacent_numbers:
            await reply_and_delete(update, context, "‚ùå –ß–∏—Å–ª–∞ –¥–ª—è —Å–ø–ª–∏—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ—Å–µ–¥–Ω–∏–º–∏.")
            return
        
        if result_number in bet_values:
            multiplier = payout_multipliers["B"]
        else:
            multiplier = 0
    elif bet_type == "C":  # –°—Ç—Ä–∏—Ç
        if len(context.args) < 3:
            await reply_and_delete(update, context, "‚ùå –î–ª—è —Å—Ç—Ä–∏—Ç–∞ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ç—Ä–∏ —á–∏—Å–ª–∞. –ü—Ä–∏–º–µ—Ä: /kazik 100 C 1 2 3")
            return
        bet_values = [int(value) for value in context.args[2:]]
        
        if len(bet_values) != 3 or any(value < 0 or value > 36 for value in bet_values):
            await reply_and_delete(update, context, "‚ùå –î–ª—è —Å—Ç—Ä–∏—Ç–∞ —É–∫–∞–∂–∏—Ç–µ —Ç—Ä–∏ —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 36.")
            return
        
        if result_number in bet_values:
            multiplier = payout_multipliers["C"]
        else:
            multiplier = 0
    elif bet_type == "D":  # –ö–∞—Ä–µ
        if len(context.args) < 3:
            await reply_and_delete(update, context, "‚ùå –î–ª—è –∫–∞—Ä–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —á–µ—Ç—ã—Ä–µ —á–∏—Å–ª–∞. –ü—Ä–∏–º–µ—Ä: /kazik 100 D 1 2 3 4")
            return
        bet_values = [int(value) for value in context.args[2:]]
        
        if len(bet_values) != 4 or any(value < 0 or value > 36 for value in bet_values):
            await reply_and_delete(update, context, "‚ùå –î–ª—è –∫–∞—Ä–µ —É–∫–∞–∂–∏—Ç–µ —á–µ—Ç—ã—Ä–µ —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 36.")
            return
        
        if result_number in bet_values:
            multiplier = payout_multipliers["D"]
        else:
            multiplier = 0
    elif bet_type == "E":  # –°–∏–∫—Å–ª–∞–π–Ω
        if len(context.args) < 3:
            await reply_and_delete(update, context, "‚ùå –î–ª—è —Å–∏–∫—Å–ª–∞–π–Ω–∞ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —à–µ—Å—Ç—å —á–∏—Å–µ–ª. –ü—Ä–∏–º–µ—Ä: /kazik 100 E 1 2 3 4 5 6")
            return
        bet_values = [int(value) for value in context.args[2:]]
        
        if len(bet_values) != 6 or any(value < 0 or value > 36 for value in bet_values):
            await reply_and_delete(update, context, "‚ùå –î–ª—è —Å–∏–∫—Å–ª–∞–π–Ω–∞ —É–∫–∞–∂–∏—Ç–µ —à–µ—Å—Ç—å —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ 36.")
            return
        
        if result_number in bet_values:
            multiplier = payout_multipliers["E"]
        else:
            multiplier = 0
    elif bet_type == "F":  # –°—Ç–∞–≤–∫–∞ –Ω–∞ —Ä—è–¥ (–∫–æ–ª–æ–Ω–∫—É)
        if bet_value not in ["1", "2", "3"]:
            await reply_and_delete(update, context, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–∞–≤–∫–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä—è–¥—ã: 1, 2, 3")
            return
        
        first_column = {1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34}
        second_column = {2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35}
        third_column = {3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36}
        
        if (bet_value == "1" and result_number in first_column) or \
           (bet_value == "2" and result_number in second_column) or \
           (bet_value == "3" and result_number in third_column):
            multiplier = payout_multipliers["F"]
        else:
            multiplier = 0
    elif bet_type == "H":  # –°—Ç–∞–≤–∫–∏ –Ω–∞ —Ü–≤–µ—Ç–∞, —á–µ—Ç/–Ω–µ—á–µ—Ç, –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        if bet_value not in ["red", "black", "even", "odd", "low", "high"]:
            await reply_and_delete(update, context, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–∞–≤–∫–∞. –î–æ—Å—Ç—É–ø–Ω–æ: red, black, even, odd, low, high")
            return
        if (bet_value == result_color) or \
           (bet_value == "even" and result_number % 2 == 0 and result_number != 0) or \
           (bet_value == "odd" and result_number % 2 == 1) or \
           (bet_value == "low" and 1 <= result_number <= 18) or \
           (bet_value == "high" and 19 <= result_number <= 36):
            multiplier = payout_multipliers["H"]
        else:
            multiplier = 0
    else:
        await reply_and_delete(update, context, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å—Ç–∞–≤–∫–∏. –ü–æ—Å–º–æ—Ç—Ä–∏ /kazik_rules")
        return
    
    if multiplier > 0:
        winnings = int(bet_amount * multiplier)
        user_data[user_id]["family_points"] += winnings
        won = True
        await reply_and_delete(update, context, f"‚úÖ –í—ã–ø–∞–ª–æ {result_number} ({result_color})! –¢—ã –≤—ã–∏–≥—Ä–∞–ª {pluralize_points(winnings)}!")
    else:
        user_data[user_id]["family_points"] -= bet_amount
        won = False
        await reply_and_delete(update, context, f"‚ùå –í—ã–ø–∞–ª–æ {result_number} ({result_color}). –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª {pluralize_points(bet_amount)}, –±—ã–≤–∞–µ—Ç")
    
    await update_user_stats(user_data, user_id, won)

# 1. –ö–æ–º–∞–Ω–¥–∞ /unmute (–¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤+)
async def unmute_user(update: Update, context: CallbackContext):
    user_data = load_user_data()
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    moderator = update.message.from_user
    moderator_id = str(moderator.id)
    moderator_username = moderator.username or f"ID:{moderator_id}"  # –ê–∫—Ç—É–∞–ª—å–Ω—ã–π username –∏–ª–∏ ID
    
    user_role = user_data.get(moderator_id, {}).get("role")
    is_admin = user_data.get(moderator_id, {}).get("admin", False)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if user_role not in ["–º–æ–¥–µ—Ä–∞—Ç–æ—Ä", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "—Å—Ç—Ä–∏–º–µ—Ä"] and not is_admin:
        await reply_and_delete(update, context, "‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –≤—ã—à–µ!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if not context.args:
        await reply_and_delete(update, context, "–ò—Å–ø–æ–ª—å–∑—É–π /unmute @username")
        return
    
    target_username = context.args[0].lstrip('@')
    target_id = next((uid for uid, data in user_data.items() if data["username"] == target_username), None)
    
    if not target_id:
        await reply_and_delete(update, context, "‚ùå –ù–µ –ø–æ–º–Ω—é —Ç–∞–∫–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —É –≤–∞—Å –µ—Å—Ç—å –º–æ–ª–æ–∫–æ?")
        return
    
    # –°–Ω–∏–º–∞–µ–º –º—É—Ç
    user_data[target_id]["muted_until"] = None
    save_user_data(user_data)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await log_to_channel(
        "INFO", 
        f"üîä –ú–∏—Å—Ç–µ—Ä –ø–∏–ø–∏—Å–∫–∏–Ω @{moderator_username} —Ä–∞–∑–º—É—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{target_username}\n"
        f"‚Ä¢ ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {moderator_id}\n"
        f"‚Ä¢ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {target_id}"
    )
    
    await reply_and_delete(update, context, f"üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} —Ä–∞–∑–º—É—á–µ–Ω")

# –ö–æ–º–∞–Ω–¥–∞ /user (–≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
async def user_info(update: Update, context: CallbackContext):
    user_data = load_user_data()
    
    if update.message:
        target_id = str(update.message.from_user.id)
    elif update.callback_query:
        target_id = str(update.callback_query.from_user.id)
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        logger.error("–û—à–∏–±–∫–∞: target_id –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω!")
        return

    if target_id not in user_data:
        logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ user_data!")
        logger.debug(f"üìú –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ ID: {list(user_data.keys())}")
        await reply_and_delete(f"‚ùå –û —Ç–µ–±–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –≥–æ–ª—É–±–∏–Ω–∞—è —Ç—ã –ø–∏–ø–∏—Å—å–∫–∞. –ü—Ä–æ–ø–∏—à–∏ /start")
        return

    data = user_data[target_id]
    muted_status = "–î–∞" if data.get("muted_until") and datetime.now() < datetime.fromisoformat(data["muted_until"]) else "–ù–µ—Ç"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    text = (
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{data['username']}\n"
        f"üëë –†–æ–ª—å: {data['role']}\n"
        f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {data['warnings']}\n"
        f"üë™ –°–µ–º—å—è: {data.get('family', '–ù–µ—Ç')}\n"
        f"üèÖ –û—á–∫–∏: {int(data.get('family_points', 0))}\n"
        f"üë≥ –¢–∏—Ç—É–ª: {data.get('family_title', '–ù–µ—Ç —Ç–∏—Ç—É–ª–∞')}\n"
        f"üëÄ –ò–≥—Ä: {data.get('games', '0')}, –ø–æ–±–µ–¥ –≤ –Ω–∏—Ö: {data.get('wins', 0)}\n"
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤—Å–µ–≥–¥–∞ –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
    await reply_and_delete(update, context, text)


# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º—É—Ç–∞
async def check_mute(update: Update, context: CallbackContext):
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–º—É—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∏ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –¥–∞. """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    if update.message is None:
        return  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    user_id = str(update.message.from_user.id)
    user_data = load_user_data()

    muted_until = user_data.get(user_id, {}).get("muted_until")
    
    if muted_until:
        try:
            muted_time = datetime.fromisoformat(muted_until)
            if datetime.now() < muted_time:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –º—É—Ç–µ
                await update.message.delete()
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üîá –£ —Ç–µ–±—è –º—É—Ç –¥–æ {muted_time.strftime('%d.%m.%Y %H:%M')}, –Ω–µ —Ä—ã–ø–∞–π—Å—è, —Å–∏–¥–∏ –∏ –¥—É–º–∞–π –Ω–∞–¥ —Å–≤–æ–∏–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º"
                )
                return
            else:
                # –£–¥–∞–ª—è–µ–º –º—É—Ç –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
                del user_data[user_id]["muted_until"]
                save_user_data(user_data)
        except ValueError:
            # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, —É–¥–∞–ª—è–µ–º –º—É—Ç
            del user_data[user_id]["muted_until"]
            save_user_data(user_data)


# 3. /points
async def points(update: Update, context: CallbackContext):
    user_data = load_user_data()
    requester_id = str(update.message.from_user.id)
    
    moderator = update.message.from_user
    moderator_id = str(moderator.id)
    user_role = user_data.get(moderator_id, {}).get("role")
    is_admin = user_data.get(moderator_id, {}).get("admin", False)
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–∏—Ö –æ—á–∫–æ–≤
    if not context.args:
        points = user_data[requester_id].get("family_points", 0)
        await reply_and_delete(update, context, f"üèÖ –£ –≤–∞—à–µ–π —Å–µ–º—å–∏ {pluralize_points(int(points))}")
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä —á—É–∂–∏—Ö –æ—á–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤+)
    if user_role not in ["–º–æ–¥–µ—Ä–∞—Ç–æ—Ä", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "—Å—Ç—Ä–∏–º–µ—Ä"] and not is_admin:
        await reply_and_delete(update, context, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    target_username = context.args[0].lstrip('@')
    target_id = next((uid for uid, data in user_data.items() if data["username"] == target_username), None)
    
    if not target_id or not user_data[target_id].get("family"):
        await reply_and_delete(update, context, "‚ùå –ë–æ—Ç—É, –≤–∏–¥–∏–º–æ, –≥–≥. –ò–ª–∏ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞. –í–∞—É-–≤–∞—É-–≤–∞—É —é–ø–∏—ë —é–ø–∏–µ–π")
        return
    
    points = user_data[target_id]["family_points"]
    await reply_and_delete(update, context, f"üèÖ –°–µ–º–µ–π–Ω—ã–µ –æ—á–∫–∏ {target_username}: {points}")

# –ü—Ä–∞–≤–∏–ª–∞ –∫–∞–∑–∏–∫–∞
async def kazik_rules(update: Update, context: CallbackContext):
    text = (
            """
            ‚ùó‚ùó‚ùó –°—Ç–∞–≤–∫–∏ –∏ –∫–∞–∑–∏–Ω–æ - –ø–ª–æ—Ö–æ. –ù–µ –∏–≥—Ä–∞–π—Ç–µ –≤ –ø–æ–¥–æ–±–Ω–æ–µ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ –¥–µ–Ω—å–≥–∏ –∏ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ —ç—Ç–æ–º—É –∫–∞–∫ –∫ —Å–ø–æ—Å–æ–±—É –∑–∞—Ä–∞–±–æ—Ç–∫–∞ ‚ùó‚ùó‚ùó \n
            ‚ùó‚ùó‚ùó –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –î–∂–µ–π–º—Å–æ–º –ë–æ–Ω–¥–æ–º, –Ω–æ –Ω–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π—Ç–µ —ç—Ç–æ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–∞–π—Ç–∞—Ö ‚ùó‚ùó‚ùó \n
            ‚ùó‚ùó‚ùó –ï—Å–ª–∏ –≤—ã –ª–µ–≥–∫–æ –ø–æ–¥—Å–∞–∂–∏–≤–∞–µ—Ç–µ—Å—å –Ω–∞ –∞–∑–∞—Ä—Ç–Ω—ã–µ –∏–≥—Ä—ã –Ω–µ —Å—Ç–æ–∏—Ç –Ω–∞—á–∏–Ω–∞—Ç—å –¥–∞–∂–µ —Ç—É—Ç. –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è ‚ùó‚ùó‚ùó \n
            
            üé∞ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ —Ä—É–ª–µ—Ç–∫—É üé∞
            
            –í —Ä—É–ª–µ—Ç–∫–µ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –≤–∏–¥—ã —Å—Ç–∞–≤–æ–∫:
            
            A ‚Äî –ü—Ä—è–º–∞—è —Å—Ç–∞–≤–∫–∞ (—Å—Ç–∞–≤–∫–∞ –Ω–∞ 1 –Ω–æ–º–µ—Ä) ‚Üí 35 –∫ 1
            –ü—Ä–∏–º–µ—Ä: /kazik 100 A 7
            –≠—Ç–æ —Å–∞–º–∞—è –≤—ã—Å–æ–∫–æ–æ–ø–ª–∞—á–∏–≤–∞–µ–º–∞—è —Å—Ç–∞–≤–∫–∞. –í—ã —Å—Ç–∞–≤–∏—Ç–µ –Ω–∞ –æ–¥–∏–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, –∏ –µ—Å–ª–∏ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä –≤—ã–ø–∞–¥–∞–µ—Ç, –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —É–º–Ω–æ–∂–∞–µ—Ç—Å—è –Ω–∞ 35.
            –ö—Ä—É—Ç–æ? –≠—Ç–æ –∂–µ –∫–∞–∫ –±—ã—Å—Ç—Ä–æ –º–æ–∂–Ω–æ –Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞ –≤–∏–ø? –ü—Ä–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–µ –≤ 200–ö (—Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å—Å—è, –µ—Å–ª–∏ —ç—Ç–æ —Ç–∞–∫, —Å–æ–æ–±—â–∏—Ç–µ —á–µ—Ä–µ–∑ /report) 
            –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å–µ–≥–æ 5.7–ö!

            B ‚Äî –°–ø–ª–∏—Ç (—Å—Ç–∞–≤–∫–∞ –Ω–∞ 2 –Ω–æ–º–µ—Ä–∞) ‚Üí 17 –∫ 1
            –ü—Ä–∏–º–µ—Ä: /kazik 100 B 7 8
            –°–ø–ª–∏—Ç ‚Äî —Å—Ç–∞–≤–∫–∞ –Ω–∞ –¥–≤–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö –Ω–æ–º–µ—Ä–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å—Ç–∞–≤–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä–∞ 7 –∏ 8, –∏ –ª—é–±–æ–π –∏–∑ –Ω–∏—Ö –≤—ã–ø–∞–¥–∞–µ—Ç, –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —É–º–Ω–æ–∂–∞–µ—Ç—Å—è –Ω–∞ 17.
            –ù–µ–ø–ª–æ—Ö–æ, –µ—Å–ª–∏ –ª—é–±–∏—Ç–µ —Ä–∏—Å–∫–Ω—É—Ç—å –ø–æ-–∫—Ä—É–ø–Ω–æ–º—É!

            C ‚Äî –°—Ç—Ä–∏—Ç (—Å—Ç–∞–≤–∫–∞ –Ω–∞ 3 –Ω–æ–º–µ—Ä–∞) ‚Üí 11 –∫ 1
            –ü—Ä–∏–º–µ—Ä: /kazik 100 C 7 8 9
            –°—Ç—Ä–∏—Ç ‚Äî —Å—Ç–∞–≤–∫–∞ –Ω–∞ —Ç—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –Ω–æ–º–µ—Ä–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å—Ç–∞–≤–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä–∞ 7, 8 –∏ 9, –∏ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –≤—ã–ø–∞–¥–∞–µ—Ç, –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —É–º–Ω–æ–∂–∞–µ—Ç—Å—è –Ω–∞ 11.
            –¢–æ–∂–µ —Ä–∏—Å–∫–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞, –Ω–æ –æ–∫—É–ø –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–µ–ø–ª–æ—Ö–æ–π.

            D ‚Äî –ö–∞—Ä–µ (—Å—Ç–∞–≤–∫–∞ –Ω–∞ 4 –Ω–æ–º–µ—Ä–∞) ‚Üí 8 –∫ 1
            –ü—Ä–∏–º–µ—Ä: /kazik 100 D 7 8 10 11
            –ö–∞—Ä–µ ‚Äî —Å—Ç–∞–≤–∫–∞ –Ω–∞ —á–µ—Ç—ã—Ä–µ –Ω–æ–º–µ—Ä–∞, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤ 7, 8, 10 –∏ 11, –µ—Å–ª–∏ –ª—é–±–æ–π –∏–∑ —ç—Ç–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤—ã–ø–∞–¥–∞–µ—Ç, —Å—Ç–∞–≤–∫–∞ —É–º–Ω–æ–∂–∞–µ—Ç—Å—è –Ω–∞ 8.
            –£–∂–µ –º–µ–Ω–µ–µ —Ä–∏—Å–∫–æ–≤–∞–Ω–æ –∏ –≤—Å—ë –µ—â–µ —Å –±–æ–ª—å—à–∏–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º. –ü–æ–ø—Ä–æ–±—É–µ—à—å?

            E ‚Äî –°–∏–∫—Å–ª–∞–π–Ω (—Å—Ç–∞–≤–∫–∞ –Ω–∞ 6 –Ω–æ–º–µ—Ä–æ–≤) ‚Üí 5 –∫ 1
            –ü—Ä–∏–º–µ—Ä: /kazik 100 E 7 8 9 10 11 12
            –°–∏–∫—Å–ª–∞–π–Ω ‚Äî —Å—Ç–∞–≤–∫–∞ –Ω–∞ —à–µ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏–¥—É—Ç –ø–æ–¥—Ä—è–¥ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –Ω–∞ –ø–æ–ª–µ. –ù–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∞–≤–∏—Ç–µ –Ω–∞ 7, 8, 9, 10, 11 –∏ 12, –∏ –µ—Å–ª–∏ –ª—é–±–æ–π –∏–∑ —ç—Ç–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤—ã–ø–∞–¥–∞–µ—Ç, 
            —Å—Ç–∞–≤–∫–∞ —É–º–Ω–æ–∂–∞–µ—Ç—Å—è –Ω–∞ 5. –ù–µ –≤—ã–∏–≥—Ä–∞—Ç—å –∑–¥–µ—Å—å –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞–≤–æ–∫ - —Ç—è–∂–µ–ª–æ, –∞ —Ö5 –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–∞—ë—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–≥—É–ª—è—Ç—å—Å—è.

            F ‚Äî –°—Ç–∞–≤–∫–∞ –Ω–∞ —Ä—è–¥ (12 –Ω–æ–º–µ—Ä–æ–≤) ‚Üí 2 –∫ 1
            –ü—Ä–∏–º–µ—Ä: /kazik 100 F 1st
            –°—Ç–∞–≤–∫–∞ –Ω–∞ —Ä—è–¥ (–∏–ª–∏ "—Å—Ç–æ–ª–±–µ—Ü") –≤–∫–ª—é—á–∞–µ—Ç 12 —á–∏—Å–µ–ª. –ù–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∞–≤–∫–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π —Ä—è–¥ (1st) –≤–∫–ª—é—á–∞–µ—Ç –Ω–æ–º–µ—Ä–∞ 1, 2, 3, ..., 12. –í —Å–ª—É—á–∞–µ –≤—ã–∏–≥—Ä—ã—à–∞ –≤—ã–ø–ª–∞—Ç–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç 2 –∫ 1.
            –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Å—Ç–∞–≤–∏—Ç—å –ø–æ-–∫—Ä—É–ø–Ω–æ–º—É!

            G ‚Äî –°—Ç–∞–≤–∫–∞ –Ω–∞ –¥—é–∂–∏–Ω—É (12 –Ω–æ–º–µ—Ä–æ–≤) ‚Üí 2 –∫ 1
            –ü—Ä–∏–º–µ—Ä: /kazik 100 G 2nd
            –î—é–∂–∏–Ω–∞ ‚Äî —Å—Ç–∞–≤–∫–∞ –Ω–∞ 12 –Ω–æ–º–µ—Ä–æ–≤ –∏–∑ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã: 1st (1-12), 2nd (13-24) –∏–ª–∏ 3rd (25-36). –ï—Å–ª–∏ –≤—ã–ø–∞–¥–∞–µ—Ç –æ–¥–∏–Ω –∏–∑ –Ω–æ–º–µ—Ä–æ–≤ –≤–∞—à–µ–π –¥—é–∂–∏–Ω—ã, –≤—ã–ø–ª–∞—Ç–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç 2 –∫ 1.
            –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Å—Ç–∞–≤–∏—Ç—å –ø–æ-–∫—Ä—É–ø–Ω–æ–º—É!
            """
    )
            
    text_2 = (
            """
            H ‚Äî –°—Ç–∞–≤–∫–∏ –Ω–∞ —Ä–∞–≤–Ω—ã–µ —à–∞–Ω—Å—ã (–∫—Ä–∞—Å–Ω–æ–µ/—á–µ—Ä–Ω–æ–µ, —á–µ—Ç–Ω–æ–µ/–Ω–µ—á–µ—Ç–Ω–æ–µ, –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ) ‚Üí 1 –∫ 1
            –ü—Ä–∏–º–µ—Ä: /kazik 100 H red
            –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–≤–∫–∏:
            - red (–∫—Ä–∞—Å–Ω–æ–µ) ‚Äî —Å—Ç–∞–≤–∫–∞ –Ω–∞ –≤—Å–µ –∫—Ä–∞—Å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1, 3, 5, 7, ...).
            - black (—á–µ—Ä–Ω–æ–µ) ‚Äî —Å—Ç–∞–≤–∫–∞ –Ω–∞ –≤—Å–µ —á–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞.
            - even (—á–µ—Ç–Ω–æ–µ) ‚Äî —Å—Ç–∞–≤–∫–∞ –Ω–∞ –≤—Å–µ —á–µ—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (2, 4, 6, ...).
            - odd (–Ω–µ—á–µ—Ç–Ω–æ–µ) ‚Äî —Å—Ç–∞–≤–∫–∞ –Ω–∞ –≤—Å–µ –Ω–µ—á–µ—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (1, 3, 5, ...).
            - low (–º–µ–Ω—å—à–µ) ‚Äî —Å—Ç–∞–≤–∫–∞ –Ω–∞ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 18.
            - high (–±–æ–ª—å—à–µ) ‚Äî —Å—Ç–∞–≤–∫–∞ –Ω–∞ —á–∏—Å–ª–∞ –æ—Ç 19 –¥–æ 36.
            –ï—Å–ª–∏ –≤—ã–ø–∞–¥–µ—Ç –æ–¥–∏–Ω –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–º–∏ –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–∏—Ö —Å—Ç–∞–≤–æ–∫, –≤—ã–ø–ª–∞—Ç–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç 1 –∫ 1.
            –í–æ—Ç —Ç—É—Ç –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –æ—á–∫–∏! –ê —á—Ç–æ? –û–¥–∏–Ω —Ä–∞–∑ –∂–∏–≤—ë–º.
            
            ‚ùó –ü—Ä–∏ –≤—ã–ø–∞–¥–µ–Ω–∏–∏ 0 –≤—Å–µ —Å—Ç–∞–≤–∫–∏, –∫—Ä–æ–º–µ A, –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—é—Ç.
            
            Even (—á–µ—Ç–Ω–æ–µ) ‚Äî —Å—Ç–∞–≤–∫–∞ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ –≤—ã–ø–∞–¥–∞–µ—Ç –ª—é–±–æ–µ —á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ (2, 4, 6, ..., 36). –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: 0 ‚Äî —Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç.
            Odd (–Ω–µ—á–µ—Ç–Ω–æ–µ) ‚Äî —Å—Ç–∞–≤–∫–∞ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ –≤—ã–ø–∞–¥–∞–µ—Ç –ª—é–±–æ–µ –Ω–µ—á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ (1, 3, 5, ..., 35). –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: 0 ‚Äî —Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç.
            Low (1-18, –º–µ–Ω—å—à–µ) ‚Äî —Å—Ç–∞–≤–∫–∞ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ –≤—ã–ø–∞–¥–∞–µ—Ç —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 18 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ. –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: 0 ‚Äî —Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç.
            High (19-36, –±–æ–ª—å—à–µ) ‚Äî —Å—Ç–∞–≤–∫–∞ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ –≤—ã–ø–∞–¥–∞–µ—Ç —á–∏—Å–ª–æ –æ—Ç 19 –¥–æ 36 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ. –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: 0 ‚Äî —Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç.
            –≠—Ç–∏ —Å—Ç–∞–≤–∫–∏ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —Å—Ç–∞–≤–∫–∞–º –Ω–∞ —Ä–∞–≤–Ω—ã–µ —à–∞–Ω—Å—ã (H), –≤—ã–ø–ª–∞—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 1 –∫ 1.
            """
    )
    await reply_and_delete(update, context, text, delete_after=120)
    await reply_and_delete(update, context, text_2, delete_after=120)

    
    
# /yupointsinfo
async def yupointsinfo(update: Update, context: CallbackContext):  # –î–æ–±–∞–≤–ª–µ–Ω context
    text = (
        "–ü—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ —Å–µ–º—å—é –≤–∞–º –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –ø–æ 10 –Æ–ø–æ–∏–Ω—Ç–æ–≤ –≤ —á–∞—Å\n"
        "–ó–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ —á–ª–µ–Ω–∞ —Å–µ–º—å–∏ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ 8 –Æ–ø–æ–∏–Ω—Ç–æ–≤ –≤ —á–∞—Å\n"
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç ‚Äî 1000 –Æ–ø–æ–∏–Ω—Ç–æ–≤.\n\n"
        "–ó–∞ –±–∞–ª–ª—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å —Ä–æ–ª—å [–∂—É–ª–∏–∫]\n\n"
        "–í–ù–ò–ú–ê–ù–ò–ï!\n"
        "‚úî –î–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –Æ–ø–æ–∏–Ω—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ—Å—Ç–æ—è—Ç—å –≤ —Å–µ–º—å–µ.\n"
        "‚ùó –í —Å–ª—É—á–∞–µ —É—Ç—Ä–∞—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ –æ—á–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç, —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –Ω–µ—Ç.\n"
        "–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –Æ–ø–æ–∏–Ω—Ç–æ–≤:\n"
        "/kiss, /hug, /sex, /joinfam. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ /help\n"
        "–ü–æ –ø–æ–≤–æ–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥:\n"
        "/hug - –¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–≥–¥–∞, /kiss - –æ—Ç 150 –æ—á–∫–æ–≤, /sex - –æ—Ç 1000 –æ—á–∫–æ–≤.\n"
        "–ï—Å–ª–∏ –∑–∞–º–µ—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–∏ –ø–æ–∏–Ω—Ç–æ–≤ - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å.\n"
    )
    await reply_and_delete(update, context, text)
    
# /moder
async def moder(update: Update, context: CallbackContext):
    user_data = load_user_data()
    
    moderator = update.message.from_user
    moderator_id = str(moderator.id)
    user_role = user_data.get(moderator_id, {}).get("role")
    is_admin = user_data.get(moderator_id, {}).get("admin", False)
    
    # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç
    if not context.args:
        text = (
            "–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã /warn, /mute, /unmute.\n\n"
            "–ù–∞—Ö*—è (sorry) —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –Ω—É–∂–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /moder, –Ω–æ –ª–∞–¥–Ω–æ\n"
            "–Ø —Ç–∞–∫ –ø–æ–¥—É–º–∞–ª –∏ –±–∞–Ω —Å –∫–∏–∫–æ–º –Ω–µ —Å—Ç–∞–ª –¥–æ–±–∞–≤–ª—è—Ç—å, —Ç—É—Ç –≤—Å—ë –ø–æ —Å—Ç–∞—Ä–∏–Ω–∫–µ\n"
            "–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /modifypoints –Ω–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
        )
        await reply_and_delete(update, context, text)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if user_role not in ["–º–æ–¥–µ—Ä–∞—Ç–æ—Ä", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "—Å—Ç—Ä–∏–º–µ—Ä"] and not is_admin:
        await reply_and_delete(update, context, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return


# /steal 
async def steal_points(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    user_data = load_user_data()
    
    moderator = update.message.from_user
    moderator_id = str(moderator.id)
    user_role = user_data.get(moderator_id, {}).get("role")
    is_admin = user_data.get(moderator_id, {}).get("admin", False)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    if user_role not in ["–º–æ–¥–µ—Ä–∞—Ç–æ—Ä", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "—Å—Ç—Ä–∏–º–µ—Ä", "–∂—É–ª–∏–∫"] and not is_admin:
        await reply_and_delete(update, context, "‚ùå –¢–æ–ª—å–∫–æ –∂—É–ª–∏–∫–∏ –º–æ–≥—É—Ç –≤–æ—Ä–æ–≤–∞—Ç—å –æ—á–∫–∏, —Ç—ã –∂–µ –Ω–µ –æ–ø—É—Å—Ç–∏—à—å—Å—è –¥–æ —Ç–∞–∫–æ–≥–æ?")
        return
    
    if not user_data[user_id].get("family"):
        await reply_and_delete(update, context, "‚ùå –°–ø–µ—Ä–º–∞ –≤—Å—Ç—É–ø–∏ –≤ —Å–µ–º—å—é")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫—Ä–∞–∂–∏
    last_theft = user_data[user_id].get("last_theft")
    if last_theft and (datetime.now() - datetime.fromisoformat(last_theft)).days < 1:
        await reply_and_delete(update, context, "‚ùå –ö—Ä–∞–∂–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏, –ø–æ–±–æ–π—Å—è –ë–æ–≥–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ–º—å—é –≤–æ—Ä–∞
    thief_family = user_data[user_id]["family"]
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å–µ–º—å–∏ –±–µ–∑ –∑–∞—â–∏—Ç–Ω–∏–∫–æ–≤
    families = defaultdict(list)
    for uid, data in user_data.items():
        family = data.get("family")
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å–µ–º—å—é –≤–æ—Ä–∞ –∏ —Å–µ–º—å–∏ —Å –∑–∞—â–∏—Ç–Ω–∏–∫–∞–º–∏
        if family and family != thief_family:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–µ–º—å–µ –∑–∞—â–∏—Ç–Ω–∏–∫
            has_defender = any(
                user_data[member].get("family_role") == "–∑–∞—â–∏—Ç–Ω–∏–∫"
                for member in user_data
                if user_data[member].get("family") == family
            )
            if not has_defender:
                families[family].append(uid)
    
    if not families:
        await reply_and_delete(update, context, "‚ùå –í—Å–µ —Å–µ–º—å–∏ –∑–∞—â–∏—â–µ–Ω—ã –∏–ª–∏ –∏—Ö –Ω–µ—Ç")
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω—É—é —Å–µ–º—å—é
    target_family = random.choice(list(families.keys()))
    target_members = families[target_family]
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–µ –æ—á–∫–∏ —Å–µ–º—å–∏-—Ü–µ–ª–∏
    family_points = sum(user_data[uid].get("family_points", 0) for uid in target_members)
    if family_points <= 0:
        await reply_and_delete(update, context, "‚ùå –£ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ–º—å–∏ –Ω–µ—Ç –æ—á–∫–æ–≤.. –∫–∞–∫–∏–º-—Ç–æ –æ–±—Ä–∞–∑–æ–º")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∫—Ä–∞–∂–∏ (1-5%)
    steal_percent = random.randint(1, 5)
    stolen_points = round(family_points * steal_percent / 100)
    
    # –ó–∞–±–∏—Ä–∞–µ–º –æ—á–∫–∏ —É —Ü–µ–ª–∏
    for uid in target_members:
        user_data[uid]["family_points"] = max(0, user_data[uid]["family_points"] - stolen_points)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ —Å–µ–º—å–µ –≤–æ—Ä–∞
    for uid in user_data:
        if user_data[uid].get("family") == thief_family:
            user_data[uid]["family_points"] += stolen_points
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫—Ä–∞–∂–∏
    user_data[user_id]["last_theft"] = datetime.now().isoformat()
    save_user_data(user_data)
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    await log_to_channel(
        "WARNING",
        f"ü¶π‚ôÇÔ∏è @{user_data[user_id]['username']} (—Å–µ–º—å—è '{thief_family}') "
        f"—É–∫—Ä–∞–ª {steal_percent}% ({pluralize_points(stolen_points)}) —É –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω–æ–π —Å–µ–º—å–∏ '{target_family}'!"
    )
    
    await reply_and_delete(update, context, f"‚úÖ –í—ã —É–∫—Ä–∞–ª–∏ {steal_percent}% ({pluralize_points(stolen_points)}) —É —Å–µ–º—å–∏ {target_family}, –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –¥–æ–±—ã—á–∞")

# –ë—Ä–∏–≥–∞–¥–∞: —ç—Ç–æ –≤—Ä–æ–¥–µ –∫–∞—Ç—è —Å–∞–º–±—É–∫–∞ –µ–µ –∑–∞—Å—Ç–∞–≤–∏–ª–∏ —Ä–∞–∑–¥–µ—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Ü–µ—Ä—Ç–µ –∏–ª–∏ –≥–¥–µ —è —Ö–∑
# /brigada
async def brigada(update: Update, context: CallbackContext):
    user_data = load_user_data()
    requester_id = str(update.message.from_user.id)
    
    # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç
    if not context.args:
        text = (
            "–ë—Ä–∏–≥–∞–¥–∞: —ç—Ç–æ –≤—Ä–æ–¥–µ –∫–∞—Ç—è —Å–∞–º–±—É–∫–∞ –µ–µ –∑–∞—Å—Ç–∞–≤–∏–ª–∏ —Ä–∞–∑–¥–µ—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Ü–µ—Ä—Ç–µ –∏–ª–∏ –≥–¥–µ —è —Ö–∑\n"
        )
        audio_path = "mp/brig.mp3"
        audio_path_1 = "mp/brig_1.mp3"
        audio_path_2 = "mp/brig_2.mp3"
        audio_path_3 = "mp/brig_3.mp3"
        audio_files = [audio_path, audio_path_1, audio_path_2, audio_path_3]
        random_audio = random.choice(audio_files)
        await context.bot.send_message(chat_id=update.effective_chat.id, text=text)
        await context.bot.send_audio(chat_id=update.effective_chat.id, audio=open(random_audio, 'rb'))
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if user_data.get(requester_id, {}).get("role") not in ["–º–æ–¥–µ—Ä–∞—Ç–æ—Ä", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "—Å—Ç—Ä–∏–º–µ—Ä", "—É—á–∞—Å—Ç–Ω–∏–∫", "–∂—É–ª–∏–∫", "vip", "–≤–∏–ø"]:
        await reply_and_delete(update, context, "‚ùå –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

# /–∂—É–ª–∏–∫
async def testrole(update: Update, context: CallbackContext):
    user_data = load_user_data()
    
    moderator = update.message.from_user
    moderator_id = str(moderator.id)
    user_role = user_data.get(moderator_id, {}).get("role")
    is_admin = user_data.get(moderator_id, {}).get("admin", False)
    
    # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç
    if not context.args:
        text = (
            "–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã /settitle - –ø–æ–º–µ–Ω—è—Ç—å —Å–µ–º–µ–π–Ω–æ–µ –∑–≤–∞–Ω–∏–µ.\n"
            "–£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –æ—á–∫–∏ –∑–∞ –¥–µ–π—Å—Ç–≤–∏—è. –û—á–∫–∏ –≤—ã–¥–∞—é—Ç—Å—è –Ω–∞ –≤—Å—é —Å–µ–º—å—é.\n"
            "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫—Ä–∞—Å—Ç—å —á—É–∂–∏–µ –æ—á–∫–∏ –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞—Ç—å –∏—Ö —Å–µ–±–µ:\n"
            "–ö–æ–º–∞–Ω–¥–∞ /steal. –†–∞–±–æ—Ç–∞–µ—Ç —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∫—Ä–∞–¥–µ–Ω–Ω–æ–≥–æ - 5%.\n"
            "–ó–∞—â–∏—Ç–∏—Ç—å—Å—è –æ—Ç –∫—Ä–∞–∂–∏ –º–æ–∂–Ω–æ –∫—É–ø–∏–≤ —Ä–æ–ª—å –∑–∞—â–∏—Ç–Ω–∏–∫.\n"
        )
        await reply_and_delete(update, context, text)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if user_role not in ["–º–æ–¥–µ—Ä–∞—Ç–æ—Ä", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "—Å—Ç—Ä–∏–º–µ—Ä", "–∂—É–ª–∏–∫"] and not is_admin:
        await reply_and_delete(update, context, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤, –Ω—É–∂–Ω–æ –±—ã—Ç—å –∂—É–ª–∏–∫–æ–º")
        return
    
async def show_info(update: Update, context: CallbackContext):
    info_text = """
    –õ–æ—Ä –±–æ—Ç–∞: 
    –í–æ –≥–ª–∞–≤–µ –≤—Å–µ–≥–æ –∑–¥–µ—Å—å —Å—Ç–æ—è—Ç –æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ 
    –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º:
    —Å–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é –∏ –∂–∏—Ç—å –ø—Ä–∏–ø–µ–≤–∞—é—á–∏ (–∏–ª–∏ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å –∏—Ö,
    –Ω–æ —ç—Ç–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏–ª–∏ —á–∏—Ç–µ—Ä–æ–≤).
    –ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞ –æ—á–∫–∏?
    –í–æ-–ø–µ—Ä–≤—ã—Ö, –∫—É–ø–∏—Ç—å —Ä–æ–ª–∏: –∂—É–ª–∏–∫, –∑–∞—â–∏—Ç–Ω–∏–∫, –≤–∏–ø. 
    –î–∞, —Å–∞–º–æ–µ –∫—Ä—É—Ç–æ–µ –∑–¥–µ—Å—å - –≤–∏–ø, –≤–µ–¥—å –æ–Ω —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è
    –µ—â—ë –∏ –Ω–∞ —Ç–≤–∏—á. –û –∂—É–ª–∏–∫–µ (/stealer) –∏ –∑–∞—â–∏—Ç–Ω–∏–∫–µ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥–∞—Ö.
    –ü–æ–º–∏–º–æ —Ä–æ–ª–µ–π –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤ —Ç–≥–∫,
    –Ω–æ –Ω–∞ —ç—Ç–æ–º –º—ã –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –∏ –∂–¥—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
    –î–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –±–æ—Ç–∞ –Ω—É–∂–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å, –µ–µ –º–æ–∂–Ω–æ –¥–∞—Ç—å –∑–¥–µ—Å—å: /report
    """
    await reply_and_delete(update, context, info_text)

# 9. –ö–æ–º–∞–Ω–¥–∞ /help
async def show_help(update: Update, context: CallbackContext):
    help_text = """
    üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /start - –ë–æ—Ç –¥–æ–±–∞–≤–∏—Ç –≤ –±–∞–∑—É
    /username [–Ω–æ–≤—ã–π_–Ω–∏–∫] - –ò–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –Ω–∏–∫
    /role - –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ—é —Ä–æ–ª—å
    /changerole - –ü–æ–º–µ–Ω—è—Ç—å —Ä–æ–ª—å
    /createfam [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –°–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é
    /joinfam [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –í—Å—Ç—É–ø–∏—Ç—å –≤ —Å–µ–º—å—é
    /leavefam - –ü–æ–∫–∏–Ω—É—Ç—å —Å–µ–º—å—é
    /familyrole [—Ä–æ–ª—å] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ–º–µ–π–Ω—É—é —Ä–æ–ª—å
    /yupointsinfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –Æ–ø–æ–∏–Ω—Ç–∞–º
    /faminfo - –ò–Ω—Ñ–∞ –æ —Å–µ–º—å–µ
    /topfam - –°–ø–∏—Å–æ–∫ —Å–µ–º–µ–π
    /points - –û—á–∫–∏ —Å–≤–æ–∏/—á—É–∂–∏–µ(–º–æ–¥–µ—Ä+)
    /moder - –ú–æ–¥–µ—Ä–∞–º –∏–Ω—Ñ–∞
    /user - –ò–Ω—Ñ–∞ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    /kickfam @user - –í—ã–≥–Ω–∞—Ç—å –∏–∑ —Å–µ–º—å–∏
    /kiss @user - –ü–æ—Å–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ—Ü–µ–ª—É–π
    /hug @user - –ü–æ—Å–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—ä—è—Ç–∏–µ
    /slap @user - –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ—â–µ—á–∏–Ω—É, –≤–¥—Ä—É–≥ –∑–∞–¥–µ—Ñ–∞–µ—Ç
    /sex @user - –ü–æ—Å–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ–≥—Å
    /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    /buyrole - –ö—É–ø–∏—Ç—å —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–æ–ª—å
    /–∂—É–ª–∏–∫ - –£–∑–Ω–∞—Ç—å –æ —Ä–æ–ª–∏
    /brigada - –î–∞–π—Ç–µ –±—Ä–∏–≥–∞–¥—É
    /report - –°–æ–æ–±—â–∏—Ç—å/–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å
    /buytitle [–¥–æ–ª–∂–Ω–æ—Å—Ç—å] - –ö—É–ø–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–µ
    /info - –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    /prediction - –ú–∞–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    /guess - –®–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å 10 000 –æ—á–∫–æ–≤!
    /kazik - –ö–∞–∑–∏–Ω–æ (–∞—Å—É)
    /kazik_rules - –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ /kazik
    /usercard - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–ø–æ–±–µ–¥—ã —Å—á–∏—Ç–∞—é—Ç—Å—è –≤ /kazik –∏ /guess)
    /anime - –†–∞–Ω–¥–æ–º–Ω–æ–µ –∞–Ω–∏–º–µ
    """
    await reply_and_delete(update, context, help_text)

async def test_command_handler(update: Update, context: CallbackContext):
    return f"–ü–æ–π–º–∞–ª –∫–æ–º–∞–Ω–¥—É: {update.message.text}"


async def change_role(update: Update, context: CallbackContext):
    user = update.message.from_user
    user_id = str(user.id)
    user_data = load_user_data()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_data.get(user_id, {}).get("role") != "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
        await reply_and_delete(update, context, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if len(context.args) < 2:
        await reply_and_delete(update, context, "–ò—Å–ø–æ–ª—å–∑—É–π /changerole [user_id] [—Ä–æ–ª—å]")
        return

    target_user_id, new_role = context.args[0], " ".join(context.args[1:]).lower()
    if new_role not in ["—É—á–∞—Å—Ç–Ω–∏–∫", "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "—Å—Ç—Ä–∏–º–µ—Ä", "–∂—É–ª–∏–∫", "–∑–∞—â–∏—Ç–Ω–∏–∫"]:
        await reply_and_delete(update, context, "‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å. –î–æ—Å—Ç—É–ø–Ω—ã–µ: —É—á–∞—Å—Ç–Ω–∏–∫, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –∂—É–ª–∏–∫, —Å—Ç—Ä–∏–º–µ—Ä")
        return

    if target_user_id not in user_data:
        await reply_and_delete(update, context, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user_data[target_user_id]["role"] = new_role
    save_user_data(user_data)
    await reply_and_delete(update, context, f"‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data[target_user_id]['username']} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_role}.")
    await log_to_channel("INFO", f"–ê–¥–º–∏–Ω {user.username} –∏–∑–º–µ–Ω–∏–ª —Ä–æ–ª—å {target_user_id} –Ω–∞ {new_role}")

async def debug_all_messages(update: Update, context: CallbackContext):
    logger.debug(f"üì© –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update}")
    await log_to_channel("INFO", f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update}")

async def my_channels(update: Update, context: CallbackContext):
    chat = await context.bot.get_chat("@username_–∫–∞–Ω–∞–ª–∞")  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —é–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞
    await update.message.reply_text(f"üì¢ ID –∫–∞–Ω–∞–ª–∞: {chat.id}")


async def run_bot():
    app = Application.builder().token(TOKEN).build()
    error = app.add_error_handler(lambda update, context: logger.error(f"Error: {context.error}"))
    
    asyncio.create_task(daily_points_task())
    
    app.add_handler(CommandHandler("my_channels", my_channels))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("role", role))
    app.add_handler(CommandHandler("changerole", change_role))
    app.add_handler(CommandHandler("username", set_username))
    app.add_handler(CommandHandler("warn", warn_user))
    app.add_handler(CommandHandler("mute", mute_user))
    app.add_handler(CommandHandler("createfam", create_family))
    app.add_handler(CommandHandler("joinfam", join_family))
    app.add_handler(CommandHandler("leavefam", leave_family))
    app.add_handler(CommandHandler("familyrole", set_family_role))
    app.add_handler(CommandHandler("help", show_help))
    app.add_handler(CommandHandler("faminfo", faminfo))
    app.add_handler(CommandHandler("topfam", topfam))
    app.add_handler(CommandHandler("points", points))
    app.add_handler(CommandHandler("moder", moder))
    app.add_handler(CommandHandler("stealer", testrole))
    app.add_handler(CommandHandler("yupointsinfo", yupointsinfo))
    app.add_handler(CommandHandler("unmute", unmute_user))
    app.add_handler(CommandHandler("user", user_info))
    app.add_handler(CommandHandler("kickfam", kick_from_family))
    app.add_handler(CommandHandler("kiss", family_action))
    app.add_handler(CommandHandler("hug", family_action))
    app.add_handler(CommandHandler("slap", family_action))
    app.add_handler(CommandHandler("sex", family_action))
    app.add_handler(CommandHandler("buyrole", buy_role))
    app.add_handler(CommandHandler("modifypoints", modify_family_points))
    app.add_handler(CommandHandler("settitle", set_family_title))
    app.add_handler(CommandHandler("steal", steal_points))
    app.add_handler(CommandHandler("brigada", brigada))
    app.add_handler(CommandHandler("report", report))
    app.add_handler(CommandHandler("guess", start_guess_game))
    app.add_handler(CommandHandler("info", show_info))
    app.add_handler(CommandHandler("buytitle", buy_title))
    app.add_handler(CommandHandler("prediction", prediction))
    app.add_handler(CommandHandler("setadm", set_admin))
    app.add_handler(CommandHandler("kazik", play_kazik))
    app.add_handler(CommandHandler("usercard", user_card))
    app.add_handler(CommandHandler("kazik_rules", kazik_rules))
    app.add_handler(CommandHandler("anime", send_random_anime))
    app.add_handler(CallbackQueryHandler(handle_join_request, pattern="^(accept_join|reject_join)_"))
    app.add_handler(CallbackQueryHandler(handle_action_response))
    
    app.add_handler(ChatMemberHandler(welcome_new_member, chat_member_types=ChatMemberHandler.ANY_CHAT_MEMBER))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & game_filter, handle_guess))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_mute))
    app.add_handler(MessageHandler(filters.COMMAND & ~filters.Regex(r'^/brigada'), delete_user_command), group=1)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_new_users))


    await log_to_channel("INFO", 
        "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω\n"
        "HELP: /help - –ø–æ–º–æ—â—å —Å –∫–æ–º–∞–Ω–¥–∞–º–∏\n"
        f"NEW: {NEW}\n"
        f"FIXED: {FIXED}\n"
        f"ERRORS: {error}"
    )

    while True:  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –≤—ã–ª–µ—Ç–æ–≤
        try:
            await app.run_polling()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
            await log_to_channel("ERROR", f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑: 5")
            await asyncio.sleep(5)  # –ñ–¥—ë–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º


if __name__ == "__main__":
    import asyncio
    import nest_asyncio
    
    nest_asyncio.apply()  

    loop = asyncio.get_event_loop()
    loop.run_until_complete(run_bot())  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫


    
    
# 1
# 2
# 3 
# 4
# 5
# 6
# 7
# 8
# 9
# 10
# 11
# 12
# 13
# 14
# 15